/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */


import { HTMLStencilElement, JSXBase } from './stencil.core';
import {
  Scale,
} from './interfaces/Icon';
import {
  Theme,
} from './interfaces/common';
import {
  Placement,
} from '@popperjs/core';
import {
  CalcitePlacement,
} from './utils/popper';
import {
  TabChangeEventDetail,
} from './interfaces/TabChange';
import {
  TreeSelectionMode,
} from './interfaces/TreeSelectionMode';
import {
  TreeSelectDetail,
} from './interfaces/TreeSelect';
import {
  TreeItemSelectDetail,
} from './interfaces/TreeItemSelect';

export namespace Components {
  interface CalciteAccordion {
    /**
    * specify the appearance - default (containing border), or minimal (no containing border), defaults to default
    */
    'appearance': "default" | "minimal" | "transparent";
    /**
    * specify the placement of the icon in the header, defaults to end
    */
    'iconPosition': "start" | "end";
    /**
    * specify the placement of the icon in the header, defaults to end
    */
    'iconType': | "chevron"
    | "caret"
    | "plus-minus";
    /**
    * specify the scale of accordion, defaults to m
    */
    'scale': "s" | "m" | "l";
    /**
    * specify the selection mode - multi (allow any number of open items), single (allow one open item), or single-persist (allow and require one open item), defaults to multi
    */
    'selectionMode': | "multi"
    | "single"
    | "single-persist";
    /**
    * specify the theme of accordion, defaults to light
    */
    'theme': "light" | "dark";
  }
  interface CalciteAccordionItem {
    'active': boolean;
    /**
    * pass a title for the accordion item
    */
    'itemSubtitle'?: string;
    /**
    * pass a title for the accordion item
    */
    'itemTitle'?: string;
  }
  interface CalciteAlert {
    /**
    * Is the alert currently active or not
    */
    'active': boolean;
    /**
    * a managed list of alerts
    */
    'alertQueue': string[];
    /**
    * a managed list of alerts
    */
    'alertQueueLength': number;
    /**
    * Close the alert automatically (recommended for passive, non-blocking alerts)
    */
    'autoDismiss': boolean;
    /**
    * Duration of autoDismiss (only used with `autoDismiss`)
    */
    'autoDismissDuration': | "fast"
    | "medium"
    | "slow";
    /**
    * close alert and emit the closed alert
    */
    'close': () => Promise<void>;
    /**
    * Color for the alert (will apply to top border and icon)
    */
    'color': | "blue"
    | "green"
    | "red"
    | "yellow";
    /**
    * the determined current alert
    */
    'currentAlert': string;
    /**
    * specify if the alert should display an icon
    */
    'icon': boolean;
    /**
    * open alert and emit the opened alert
    */
    'open': () => Promise<void>;
    /**
    * specify the scale of the button, defaults to m
    */
    'scale': "s" | "m" | "l";
    /**
    * focus the close button, if present and requested
    */
    'setFocus': () => Promise<void>;
    /**
    * Select theme (light or dark)
    */
    'theme': "light" | "dark";
  }
  interface CalciteButton {
    /**
    * specify the appearance style of the button, defaults to solid. Specifying "inline" will render the component as an anchor
    */
    'appearance': | "solid"
    | "outline"
    | "clear"
    | "inline";
    /**
    * specify the color of the button, defaults to blue
    */
    'color': | "blue"
    | "dark"
    | "light"
    | "red";
    /**
    * is the button disabled
    */
    'disabled'?: boolean;
    /**
    * optionally add a floating style to the button - this should be positioned fixed or sticky
    */
    'floating'?: boolean;
    /**
    * optionally pass a href - used to determine if the component should render as a button or an anchor
    */
    'href'?: string;
    /**
    * optionally pass an icon to display - accepts Calcite UI icon names
    */
    'icon'?: string;
    /**
    * optionally used with icon, select where to position the icon
    */
    'iconPosition'?: "start" | "end";
    /**
    * optionally add a calcite-loader component to the button, disabling interaction.
    */
    'loading'?: boolean;
    /**
    * optionally add a round style to the button
    */
    'round'?: boolean;
    /**
    * specify the scale of the button, defaults to m
    */
    'scale': "xs" | "s" | "m" | "l" | "xl";
    'setFocus': () => Promise<void>;
    /**
    * Select theme (light or dark)
    */
    'theme': "light" | "dark";
    /**
    * specify the width of the button, defaults to auto
    */
    'width': "auto" | "half" | "full";
  }
  interface CalciteCard {
    /**
    * When true, the cards content is waiting to be loaded. This state shows a busy indicator.
    */
    'loading': boolean;
    /**
    * Indicates whether the card is selectable.
    */
    'selectable': boolean;
    /**
    * Indicates whether the card is selected.
    */
    'selected': boolean;
    /**
    * The theme of the card.
    */
    'theme': "light" | "dark";
  }
  interface CalciteCheckbox {
    /**
    * True if the checkbox is initially checked
    */
    'checked'?: boolean;
    /**
    * True if the checkbox is disabled
    */
    'disabled'?: boolean;
    /**
    * True if the checkbox is initially indeterminate, which is independent from its checked state https://css-tricks.com/indeterminate-checkboxes/
    */
    'indeterminate'?: boolean;
    /**
    * The name of the checkbox input
    */
    'name'?: string;
    /**
    * Size of the checkbox
    */
    'size'?: "small" | "large";
    /**
    * Determines what theme to use
    */
    'theme': "light" | "dark";
    /**
    * The value of the checkbox input
    */
    'value'?: string;
  }
  interface CalciteDateDay {
    /**
    * Active tells whether day is Actively in focus.
    */
    'active': boolean;
    /**
    * day of the month to be shown.
    */
    'day': number;
    /**
    * Enables tells whether day enabled for the user click.
    */
    'enable': boolean;
    /**
    * Selected tells whether day is selected.
    */
    'selected': boolean;
  }
  interface CalciteDateMonth {
    /**
    * Date currently active.
    */
    'activeDate': Date;
    /**
    * pass the locale in which user wants to show the date.
    */
    'locale': string;
    /**
    * Maximum date of the calendar above which is disabled.
    */
    'max': Date;
    /**
    * Minimum date of the calendar below which is disabled.
    */
    'min': Date;
    /**
    * Month number starting 0 as January for which the calendar is shown.
    */
    'month': number;
    /**
    * Already selected date.
    */
    'selectedDate': Date;
    /**
    * Sun by default 0: Sunday 1: Monday 2: Tuesday 3: Wednesday 4: Thursday 5: Friday 6: Saturday
    */
    'startOfWeek': number;
    /**
    * Year for which the calendar is shown.
    */
    'year': number;
  }
  interface CalciteDateMonthHeader {
    /**
    * pass the locale in which user wants to show the date.
    */
    'locale': string;
    /**
    * Maximum date of the calendar above which is disabled.
    */
    'max': Date;
    /**
    * Minimum date of the calendar below which is disabled.
    */
    'min': Date;
    /**
    * Month number starting 0 as January for which the calendar is shown.
    */
    'month': number;
    /**
    * Localized string for next month.
    */
    'nextMonthLabel': string;
    /**
    * Localized string for previous month.
    */
    'prevMonthLabel': string;
    /**
    * Already selected date.
    */
    'selectedDate': Date;
    /**
    * Year for which the calendar is shown.
    */
    'year': number;
  }
  interface CalciteDatePicker {
    /**
    * pass the locale in which user wants to show the date.
    */
    'locale'?: string;
    /**
    * Value of the form control
    */
    'max'?: string;
    /**
    * Name of the form control (useful for specifying input/label relationship)
    */
    'min'?: string;
    /**
    * Localized string for next month.
    */
    'nextMonthLabel'?: string;
    /**
    * Show no input for only calendar popup
    */
    'noCalendarInput'?: boolean;
    /**
    * Localized string for place holder to the date picker input.
    */
    'placeholder': string;
    /**
    * Localized string for previous month.
    */
    'prevMonthLabel'?: string;
    /**
    * Expand or collapse when calendar does not have input.
    */
    'showCalendar': boolean;
    /**
    * Sun by default 0: Sunday 1: Monday 2: Tuesday 3: Wednesday 4: Thursday 5: Friday 6: Saturday
    */
    'startOfWeek'?: number;
    /**
    * Value of the form control
    */
    'value'?: string;
    /**
    * Input as Date
    */
    'valueAsDate'?: Date;
  }
  interface CalciteDropdown {
    'active': boolean;
    /**
    * specify the alignment of dropdrown, defaults to left
    */
    'alignment': | "left"
    | "right"
    | "center";
    /**
    * specify the scale of dropdrown, defaults to m
    */
    'scale': "s" | "m" | "l";
    /**
    * specify the theme of the dropdown, defaults to light
    */
    'theme': "light" | "dark";
    /**
    * specify whether the dropdown is opened by hover or click of the trigger element
    */
    'type': "hover" | "click";
    /**
    * specify the width of dropdrown, defaults to m
    */
    'width': "s" | "m" | "l";
  }
  interface CalciteDropdownGroup {
    /**
    * optionally set a group title for display
    */
    'groupTitle'?: string;
    /**
    * specify the selection mode - multi (allow any number of (or no) active items), single (allow and require one active item), none (no active items), defaults to single
    */
    'selectionMode': | "multi"
    | "single"
    | "none";
  }
  interface CalciteDropdownItem {
    'active': boolean;
    /**
    * pass an optional href to render an anchor around the link items
    */
    'href'?: string;
    /**
    * optionally pass an icon to display at the end of an item - accepts calcite ui icon names
    */
    'iconEnd'?: string;
    /**
    * optionally pass an icon to display at the start of an item - accepts calcite ui icon names
    */
    'iconStart'?: string;
    /**
    * pass an optional title for rendered href
    */
    'linkTitle'?: string;
  }
  interface CalciteExample {
    /**
    * Add a jsdoc comment describing your method and it's parameters (use `@param`).
    */
    'doThing': () => Promise<void>;
    /**
    * Be sure to add a jsdoc comment describing your property for the generated readme file. If your property should be hidden from documentation, you can use the `@internal` tag
    */
    'property': string;
  }
  interface CalciteIcon {
    /**
    * When true, the icon will be filled.
    */
    'filled': boolean;
    /**
    * The name of the icon to display. The value of this property must match the icon name from https://esri.github.io/calcite-ui-icons/.
    */
    'icon': string;
    /**
    * When true, the icon will be mirrored when the element direction is 'rtl'.
    */
    'mirrored': boolean;
    /**
    * Icon scale. Can be "s" | "m" | "l".
    */
    'scale': Scale;
    /**
    * The icon label.  It is recommended to set this value if your icon is semantic.
    */
    'textLabel': string;
    /**
    * Icon theme. Can be "light" or "dark".
    */
    'theme': Theme;
  }
  interface CalciteLoader {
    /**
    * Inline loaders are smaller and will appear to the left of the text
    */
    'inline': boolean;
    /**
    * Show the loader
    */
    'isActive': boolean;
    /**
    * Turn off spacing around the loader
    */
    'noPadding'?: boolean;
    /**
    * Text which should appear under the loading indicator (optional)
    */
    'text': string;
    /**
    * Use indeterminate if finding actual progress value is impossible
    */
    'type': "indeterminate" | "determinate";
    /**
    * Percent complete of 100, only valid for determinate indicators
    */
    'value': number;
  }
  interface CalciteModal {
    /**
    * Optionally pass a function to run before close
    */
    'beforeClose': (el: HTMLElement) => Promise<void>;
    /**
    * Close the modal, first running the `beforeClose` method
    */
    'close': () => Promise<HTMLElement>;
    /**
    * Aria label for the close button
    */
    'closeLabel': string;
    /**
    * Adds a color bar at the top for visual impact, Use color to add importance to desctructive/workflow dialogs.
    */
    'color'?: "red" | "blue";
    /**
    * Flag to disable the default close on escape behavior
    */
    'disableEscape'?: boolean;
    /**
    * Prevent the modal from taking up the entire screen on mobile
    */
    'docked': boolean;
    /**
    * Specify an element to focus when the modal is first opened
    */
    'firstFocus'?: HTMLElement;
    /**
    * Focus first interactive element
    */
    'focusElement': (el?: HTMLElement) => Promise<void>;
    /**
    * Turn off spacing around the content area slot
    */
    'noPadding'?: boolean;
    /**
    * Open the modal
    */
    'open': () => Promise<HTMLElement>;
    /**
    * Set the scroll top of the modal content
    */
    'scrollContent': (top?: number, left?: number) => Promise<void>;
    /**
    * Set the overall size of the modal
    */
    'size': "small" | "medium" | "large" | "fullscreen";
    /**
    * Select theme (light or dark)
    */
    'theme': "light" | "dark";
  }
  interface CalciteNotice {
    /**
    * Is the notice currently active or not
    */
    'active': boolean;
    /**
    * close the notice emit the `calciteNoticeClose` event - <calcite-notice> listens for this
    */
    'close': () => Promise<void>;
    /**
    * Color for the notice (will apply to top border and icon)
    */
    'color': | "blue"
    | "green"
    | "red"
    | "yellow";
    /**
    * Select theme (light or dark)
    */
    'dismissible'?: boolean;
    /**
    * If false, no icon will be shown in the notice
    */
    'icon': boolean;
    /**
    * open the notice and emit the `calciteNoticeOpen` event - <calcite-notice> listens for this
    */
    'open': () => Promise<void>;
    /**
    * specify the scale of the notice, defaults to m
    */
    'scale': "s" | "m" | "l";
    /**
    * focus the close button, if present and requested
    */
    'setFocus': () => Promise<void>;
    /**
    * Select theme (light or dark)
    */
    'theme': "light" | "dark";
    /**
    * specify the scale of the button, defaults to m
    */
    'width': "auto" | "half" | "full";
  }
  interface CalcitePagination {
    /**
    * Change between foreground colors or background colors for container background
    */
    'backgroundStyle': "backgroundColor" | "foregroundColor";
    /**
    * When called, selected page will increment by 1.
    */
    'nextPage': () => Promise<void>;
    /**
    * starting selected index
    */
    'num': number;
    /**
    * When called, selected page will decrement by 1.
    */
    'previousPage': () => Promise<void>;
    /**
    * Set selected page to a specific page number. Will not go below start or above total.
    */
    'setPage': (num: number) => Promise<void>;
    /**
    * starting number of the pagination
    */
    'start': number;
    /**
    * title of the next button
    */
    'textLabelNext': string;
    /**
    * title of the previous button
    */
    'textLabelPrevious': string;
    /**
    * specify the theme of accordion, defaults to light
    */
    'theme': "light" | "dark";
    /**
    * ending number of the pagination
    */
    'total': number;
  }
  interface CalcitePopover {
    /**
    * Adds a click handler to the referenceElement to toggle open the Popover.
    */
    'addClickHandle': boolean;
    /**
    * Display a close button within the Popover.
    */
    'closeButton': boolean;
    /**
    * Prevents flipping the popover's placement when it starts to overlap its reference element.
    */
    'disableFlip': boolean;
    /**
    * Removes the caret pointer.
    */
    'disablePointer': boolean;
    /**
    * Defines the available placements that can be used when a flip occurs.
    */
    'flipPlacements'?: Placement[];
    /**
    * Offset the position of the popover away from the reference element.
    */
    'offsetDistance': number;
    /**
    * Offset the position of the popover along the reference element.
    */
    'offsetSkidding': number;
    /**
    * Display and position the component.
    */
    'open': boolean;
    /**
    * Determines where the component will be positioned relative to the referenceElement.
    */
    'placement': CalcitePlacement;
    /**
    * Reference HTMLElement used to position this component according to the placement property.
    */
    'referenceElement': HTMLElement | string;
    'reposition': () => Promise<void>;
    'setFocus': (focusId?: "close-button") => Promise<void>;
    /**
    * Text for close button.
    */
    'textClose': string;
    /**
    * Select theme (light or dark)
    */
    'theme': "light" | "dark";
    'toggle': () => Promise<void>;
  }
  interface CalciteProgress {
    /**
    * Fill bar in the opposite direction
    */
    'reversed': boolean;
    /**
    * Text label for the progress indicator
    */
    'text': string;
    /**
    * Select theme (light or dark)
    */
    'theme': "light" | "dark";
    /**
    * Use indeterminate if finding actual progress value is impossible
    */
    'type': "indeterminate" | "determinate";
    /**
    * Percent complete of 100
    */
    'value': number;
  }
  interface CalciteRadioGroup {
    /**
    * The group's name. Gets submitted with the form.
    */
    'name': string;
    /**
    * The scale of the button
    */
    'scale': "s" | "m" | "l";
    /**
    * The group's selected item.
    */
    'selectedItem': HTMLCalciteRadioGroupItemElement;
    /**
    * The component's theme.
    */
    'theme': "light" | "dark";
  }
  interface CalciteRadioGroupItem {
    /**
    * Indicates whether the control is checked.
    */
    'checked': boolean;
    /**
    * The control's value.
    */
    'value': any | null;
  }
  interface CalciteSlider {
    /**
    * Disable and gray out the slider
    */
    'disabled': boolean;
    /**
    * Label handles with their numeric value
    */
    'labelHandles'?: boolean;
    /**
    * Label tick marks with their numeric value.
    */
    'labelTicks'?: boolean;
    /**
    * Maximum selectable value
    */
    'max': number;
    /**
    * Label for second handle if needed (ex. "Temperature, upper bound")
    */
    'maxLabel'?: string;
    /**
    * Currently selected upper number (if multi-select)
    */
    'maxValue'?: number;
    /**
    * Minimum selectable value
    */
    'min': number;
    /**
    * Label for first (or only) handle (ex. "Temperature, lower bound")
    */
    'minLabel': string;
    /**
    * Currently selected lower number (if multi-select)
    */
    'minValue'?: number;
    /**
    * Interval to move on page up/page down keys
    */
    'pageStep'?: number;
    /**
    * Use finer point for handles
    */
    'precise'?: boolean;
    /**
    * Snap selection along the step interval
    */
    'snap'?: boolean;
    /**
    * Interval to move on up/down keys
    */
    'step'?: number;
    /**
    * Select theme (light or dark)
    */
    'theme': "light" | "dark";
    /**
    * Show tick marks on the number line at provided interval
    */
    'ticks'?: number;
    /**
    * Currently selected number (if single select)
    */
    'value': null | number;
  }
  interface CalciteSwitch {
    /**
    * What color the switch should be
    */
    'color': "red" | "blue";
    /**
    * The name of the checkbox input
    */
    'name'?: string;
    /**
    * The scale of the button
    */
    'scale': "s" | "m" | "l";
    /**
    * True if the switch is initially on
    */
    'switched'?: boolean;
    /**
    * The component's theme.
    */
    'theme': "light" | "dark";
    /**
    * The value of the checkbox input
    */
    'value'?: string;
  }
  interface CalciteTab {
    /**
    * Return the index of this tab within the tab array
    */
    'getTabIndex': () => Promise<number>;
    /**
    * Show this tab
    */
    'isActive': boolean;
    /**
    * Optionally include a unique name for this tab, be sure to also set this name on the associated title.
    */
    'tab': string;
    'updateAriaInfo': (tabIds?: string[], titleIds?: string[]) => Promise<void>;
  }
  interface CalciteTabNav {
    /**
    * Name to use when saving selected tab data to localStorage
    */
    'storageId': string;
    /**
    * Pass the same string to multiple tab navs to keep them all in sync if one changes
    */
    'syncId': string;
  }
  interface CalciteTabTitle {
    'getTabIdentifier': () => Promise<string | number>;
    /**
    * Return the index of this title within the nav
    */
    'getTabIndex': () => Promise<number>;
    /**
    * Show this tab title as selected
    */
    'isActive': boolean;
    /**
    * Optionally include a unique name for the tab title, be sure to also set this name on the associated tab.
    */
    'tab'?: string;
    'updateAriaInfo': (tabIds?: string[], titleIds?: string[]) => Promise<void>;
  }
  interface CalciteTabs {
    /**
    * Align tab titles to the edge or fully justify them across the tab nav ("center")
    */
    'layout': "center" | "inline";
    /**
    * Select theme (light or dark)
    */
    'theme': "light" | "dark";
  }
  interface CalciteTooltip {
    /**
    * Offset the position of the popover away from the reference element.
    */
    'offsetDistance': number;
    /**
    * Offset the position of the popover along the reference element.
    */
    'offsetSkidding': number;
    /**
    * Display and position the component.
    */
    'open': boolean;
    /**
    * Determines where the component will be positioned relative to the referenceElement.
    */
    'placement': CalcitePlacement;
    /**
    * Reference HTMLElement used to position this component.
    */
    'referenceElement': HTMLElement | string;
    'reposition': () => Promise<void>;
    /**
    * Select theme (light or dark)
    */
    'theme': "light" | "dark";
  }
  interface CalciteTree {
    /**
    * Be sure to add a jsdoc comment describing your propery for the generated readme file. If your property should be hidden from documentation, you can use the `@internal` tag
    */
    'lines': boolean;
    'root': boolean;
    'selectionMode': TreeSelectionMode;
    'size': "s" | "m";
    'theme': "light" | "dark";
  }
  interface CalciteTreeItem {
    'depth': number;
    'expanded': boolean;
    'hasChildren': boolean;
    'parentExpanded': boolean;
    /**
    * Be sure to add a jsdoc comment describing your property for the generated readme file. If your property should be hidden from documentation, you can use the `@internal` tag
    */
    'selected': boolean;
  }
}

declare global {


  interface HTMLCalciteAccordionElement extends Components.CalciteAccordion, HTMLStencilElement {}
  var HTMLCalciteAccordionElement: {
    prototype: HTMLCalciteAccordionElement;
    new (): HTMLCalciteAccordionElement;
  };

  interface HTMLCalciteAccordionItemElement extends Components.CalciteAccordionItem, HTMLStencilElement {}
  var HTMLCalciteAccordionItemElement: {
    prototype: HTMLCalciteAccordionItemElement;
    new (): HTMLCalciteAccordionItemElement;
  };

  interface HTMLCalciteAlertElement extends Components.CalciteAlert, HTMLStencilElement {}
  var HTMLCalciteAlertElement: {
    prototype: HTMLCalciteAlertElement;
    new (): HTMLCalciteAlertElement;
  };

  interface HTMLCalciteButtonElement extends Components.CalciteButton, HTMLStencilElement {}
  var HTMLCalciteButtonElement: {
    prototype: HTMLCalciteButtonElement;
    new (): HTMLCalciteButtonElement;
  };

  interface HTMLCalciteCardElement extends Components.CalciteCard, HTMLStencilElement {}
  var HTMLCalciteCardElement: {
    prototype: HTMLCalciteCardElement;
    new (): HTMLCalciteCardElement;
  };

  interface HTMLCalciteCheckboxElement extends Components.CalciteCheckbox, HTMLStencilElement {}
  var HTMLCalciteCheckboxElement: {
    prototype: HTMLCalciteCheckboxElement;
    new (): HTMLCalciteCheckboxElement;
  };

  interface HTMLCalciteDateDayElement extends Components.CalciteDateDay, HTMLStencilElement {}
  var HTMLCalciteDateDayElement: {
    prototype: HTMLCalciteDateDayElement;
    new (): HTMLCalciteDateDayElement;
  };

  interface HTMLCalciteDateMonthElement extends Components.CalciteDateMonth, HTMLStencilElement {}
  var HTMLCalciteDateMonthElement: {
    prototype: HTMLCalciteDateMonthElement;
    new (): HTMLCalciteDateMonthElement;
  };

  interface HTMLCalciteDateMonthHeaderElement extends Components.CalciteDateMonthHeader, HTMLStencilElement {}
  var HTMLCalciteDateMonthHeaderElement: {
    prototype: HTMLCalciteDateMonthHeaderElement;
    new (): HTMLCalciteDateMonthHeaderElement;
  };

  interface HTMLCalciteDatePickerElement extends Components.CalciteDatePicker, HTMLStencilElement {}
  var HTMLCalciteDatePickerElement: {
    prototype: HTMLCalciteDatePickerElement;
    new (): HTMLCalciteDatePickerElement;
  };

  interface HTMLCalciteDropdownElement extends Components.CalciteDropdown, HTMLStencilElement {}
  var HTMLCalciteDropdownElement: {
    prototype: HTMLCalciteDropdownElement;
    new (): HTMLCalciteDropdownElement;
  };

  interface HTMLCalciteDropdownGroupElement extends Components.CalciteDropdownGroup, HTMLStencilElement {}
  var HTMLCalciteDropdownGroupElement: {
    prototype: HTMLCalciteDropdownGroupElement;
    new (): HTMLCalciteDropdownGroupElement;
  };

  interface HTMLCalciteDropdownItemElement extends Components.CalciteDropdownItem, HTMLStencilElement {}
  var HTMLCalciteDropdownItemElement: {
    prototype: HTMLCalciteDropdownItemElement;
    new (): HTMLCalciteDropdownItemElement;
  };

  interface HTMLCalciteExampleElement extends Components.CalciteExample, HTMLStencilElement {}
  var HTMLCalciteExampleElement: {
    prototype: HTMLCalciteExampleElement;
    new (): HTMLCalciteExampleElement;
  };

  interface HTMLCalciteIconElement extends Components.CalciteIcon, HTMLStencilElement {}
  var HTMLCalciteIconElement: {
    prototype: HTMLCalciteIconElement;
    new (): HTMLCalciteIconElement;
  };

  interface HTMLCalciteLoaderElement extends Components.CalciteLoader, HTMLStencilElement {}
  var HTMLCalciteLoaderElement: {
    prototype: HTMLCalciteLoaderElement;
    new (): HTMLCalciteLoaderElement;
  };

  interface HTMLCalciteModalElement extends Components.CalciteModal, HTMLStencilElement {}
  var HTMLCalciteModalElement: {
    prototype: HTMLCalciteModalElement;
    new (): HTMLCalciteModalElement;
  };

  interface HTMLCalciteNoticeElement extends Components.CalciteNotice, HTMLStencilElement {}
  var HTMLCalciteNoticeElement: {
    prototype: HTMLCalciteNoticeElement;
    new (): HTMLCalciteNoticeElement;
  };

  interface HTMLCalcitePaginationElement extends Components.CalcitePagination, HTMLStencilElement {}
  var HTMLCalcitePaginationElement: {
    prototype: HTMLCalcitePaginationElement;
    new (): HTMLCalcitePaginationElement;
  };

  interface HTMLCalcitePopoverElement extends Components.CalcitePopover, HTMLStencilElement {}
  var HTMLCalcitePopoverElement: {
    prototype: HTMLCalcitePopoverElement;
    new (): HTMLCalcitePopoverElement;
  };

  interface HTMLCalciteProgressElement extends Components.CalciteProgress, HTMLStencilElement {}
  var HTMLCalciteProgressElement: {
    prototype: HTMLCalciteProgressElement;
    new (): HTMLCalciteProgressElement;
  };

  interface HTMLCalciteRadioGroupElement extends Components.CalciteRadioGroup, HTMLStencilElement {}
  var HTMLCalciteRadioGroupElement: {
    prototype: HTMLCalciteRadioGroupElement;
    new (): HTMLCalciteRadioGroupElement;
  };

  interface HTMLCalciteRadioGroupItemElement extends Components.CalciteRadioGroupItem, HTMLStencilElement {}
  var HTMLCalciteRadioGroupItemElement: {
    prototype: HTMLCalciteRadioGroupItemElement;
    new (): HTMLCalciteRadioGroupItemElement;
  };

  interface HTMLCalciteSliderElement extends Components.CalciteSlider, HTMLStencilElement {}
  var HTMLCalciteSliderElement: {
    prototype: HTMLCalciteSliderElement;
    new (): HTMLCalciteSliderElement;
  };

  interface HTMLCalciteSwitchElement extends Components.CalciteSwitch, HTMLStencilElement {}
  var HTMLCalciteSwitchElement: {
    prototype: HTMLCalciteSwitchElement;
    new (): HTMLCalciteSwitchElement;
  };

  interface HTMLCalciteTabElement extends Components.CalciteTab, HTMLStencilElement {}
  var HTMLCalciteTabElement: {
    prototype: HTMLCalciteTabElement;
    new (): HTMLCalciteTabElement;
  };

  interface HTMLCalciteTabNavElement extends Components.CalciteTabNav, HTMLStencilElement {}
  var HTMLCalciteTabNavElement: {
    prototype: HTMLCalciteTabNavElement;
    new (): HTMLCalciteTabNavElement;
  };

  interface HTMLCalciteTabTitleElement extends Components.CalciteTabTitle, HTMLStencilElement {}
  var HTMLCalciteTabTitleElement: {
    prototype: HTMLCalciteTabTitleElement;
    new (): HTMLCalciteTabTitleElement;
  };

  interface HTMLCalciteTabsElement extends Components.CalciteTabs, HTMLStencilElement {}
  var HTMLCalciteTabsElement: {
    prototype: HTMLCalciteTabsElement;
    new (): HTMLCalciteTabsElement;
  };

  interface HTMLCalciteTooltipElement extends Components.CalciteTooltip, HTMLStencilElement {}
  var HTMLCalciteTooltipElement: {
    prototype: HTMLCalciteTooltipElement;
    new (): HTMLCalciteTooltipElement;
  };

  interface HTMLCalciteTreeElement extends Components.CalciteTree, HTMLStencilElement {}
  var HTMLCalciteTreeElement: {
    prototype: HTMLCalciteTreeElement;
    new (): HTMLCalciteTreeElement;
  };

  interface HTMLCalciteTreeItemElement extends Components.CalciteTreeItem, HTMLStencilElement {}
  var HTMLCalciteTreeItemElement: {
    prototype: HTMLCalciteTreeItemElement;
    new (): HTMLCalciteTreeItemElement;
  };
  interface HTMLElementTagNameMap {
    'calcite-accordion': HTMLCalciteAccordionElement;
    'calcite-accordion-item': HTMLCalciteAccordionItemElement;
    'calcite-alert': HTMLCalciteAlertElement;
    'calcite-button': HTMLCalciteButtonElement;
    'calcite-card': HTMLCalciteCardElement;
    'calcite-checkbox': HTMLCalciteCheckboxElement;
    'calcite-date-day': HTMLCalciteDateDayElement;
    'calcite-date-month': HTMLCalciteDateMonthElement;
    'calcite-date-month-header': HTMLCalciteDateMonthHeaderElement;
    'calcite-date-picker': HTMLCalciteDatePickerElement;
    'calcite-dropdown': HTMLCalciteDropdownElement;
    'calcite-dropdown-group': HTMLCalciteDropdownGroupElement;
    'calcite-dropdown-item': HTMLCalciteDropdownItemElement;
    'calcite-example': HTMLCalciteExampleElement;
    'calcite-icon': HTMLCalciteIconElement;
    'calcite-loader': HTMLCalciteLoaderElement;
    'calcite-modal': HTMLCalciteModalElement;
    'calcite-notice': HTMLCalciteNoticeElement;
    'calcite-pagination': HTMLCalcitePaginationElement;
    'calcite-popover': HTMLCalcitePopoverElement;
    'calcite-progress': HTMLCalciteProgressElement;
    'calcite-radio-group': HTMLCalciteRadioGroupElement;
    'calcite-radio-group-item': HTMLCalciteRadioGroupItemElement;
    'calcite-slider': HTMLCalciteSliderElement;
    'calcite-switch': HTMLCalciteSwitchElement;
    'calcite-tab': HTMLCalciteTabElement;
    'calcite-tab-nav': HTMLCalciteTabNavElement;
    'calcite-tab-title': HTMLCalciteTabTitleElement;
    'calcite-tabs': HTMLCalciteTabsElement;
    'calcite-tooltip': HTMLCalciteTooltipElement;
    'calcite-tree': HTMLCalciteTreeElement;
    'calcite-tree-item': HTMLCalciteTreeItemElement;
  }
}

declare namespace LocalJSX {
  interface CalciteAccordion {
    /**
    * specify the appearance - default (containing border), or minimal (no containing border), defaults to default
    */
    'appearance'?: "default" | "minimal" | "transparent";
    /**
    * specify the placement of the icon in the header, defaults to end
    */
    'iconPosition'?: "start" | "end";
    /**
    * specify the placement of the icon in the header, defaults to end
    */
    'iconType'?: | "chevron"
    | "caret"
    | "plus-minus";
    'onCalciteAccordionItemHasChanged'?: (event: CustomEvent<any>) => void;
    /**
    * specify the scale of accordion, defaults to m
    */
    'scale'?: "s" | "m" | "l";
    /**
    * specify the selection mode - multi (allow any number of open items), single (allow one open item), or single-persist (allow and require one open item), defaults to multi
    */
    'selectionMode'?: | "multi"
    | "single"
    | "single-persist";
    /**
    * specify the theme of accordion, defaults to light
    */
    'theme'?: "light" | "dark";
  }
  interface CalciteAccordionItem {
    'active'?: boolean;
    /**
    * pass a title for the accordion item
    */
    'itemSubtitle'?: string;
    /**
    * pass a title for the accordion item
    */
    'itemTitle'?: string;
    'onCalciteAccordionItemKeyEvent'?: (event: CustomEvent<any>) => void;
    'onCalciteAccordionItemSelected'?: (event: CustomEvent<any>) => void;
    'onCloseCalciteAccordionItem'?: (event: CustomEvent<any>) => void;
    'onRegisterCalciteAccordionItem'?: (event: CustomEvent<any>) => void;
  }
  interface CalciteAlert {
    /**
    * Is the alert currently active or not
    */
    'active'?: boolean;
    /**
    * a managed list of alerts
    */
    'alertQueue'?: string[];
    /**
    * a managed list of alerts
    */
    'alertQueueLength'?: number;
    /**
    * Close the alert automatically (recommended for passive, non-blocking alerts)
    */
    'autoDismiss'?: boolean;
    /**
    * Duration of autoDismiss (only used with `autoDismiss`)
    */
    'autoDismissDuration'?: | "fast"
    | "medium"
    | "slow";
    /**
    * Color for the alert (will apply to top border and icon)
    */
    'color'?: | "blue"
    | "green"
    | "red"
    | "yellow";
    /**
    * the determined current alert
    */
    'currentAlert'?: string;
    /**
    * specify if the alert should display an icon
    */
    'icon'?: boolean;
    /**
    * Fired when an alert is closed
    */
    'onCalciteAlertClose'?: (event: CustomEvent<any>) => void;
    /**
    * Fired when an alert is opened
    */
    'onCalciteAlertOpen'?: (event: CustomEvent<any>) => void;
    /**
    * Fired when an alert is opened
    */
    'onCalciteAlertSync'?: (event: CustomEvent<any>) => void;
    /**
    * specify the scale of the button, defaults to m
    */
    'scale'?: "s" | "m" | "l";
    /**
    * Select theme (light or dark)
    */
    'theme'?: "light" | "dark";
  }
  interface CalciteButton {
    /**
    * specify the appearance style of the button, defaults to solid. Specifying "inline" will render the component as an anchor
    */
    'appearance'?: | "solid"
    | "outline"
    | "clear"
    | "inline";
    /**
    * specify the color of the button, defaults to blue
    */
    'color'?: | "blue"
    | "dark"
    | "light"
    | "red";
    /**
    * is the button disabled
    */
    'disabled'?: boolean;
    /**
    * optionally add a floating style to the button - this should be positioned fixed or sticky
    */
    'floating'?: boolean;
    /**
    * optionally pass a href - used to determine if the component should render as a button or an anchor
    */
    'href'?: string;
    /**
    * optionally pass an icon to display - accepts Calcite UI icon names
    */
    'icon'?: string;
    /**
    * optionally used with icon, select where to position the icon
    */
    'iconPosition'?: "start" | "end";
    /**
    * optionally add a calcite-loader component to the button, disabling interaction.
    */
    'loading'?: boolean;
    /**
    * optionally add a round style to the button
    */
    'round'?: boolean;
    /**
    * specify the scale of the button, defaults to m
    */
    'scale'?: "xs" | "s" | "m" | "l" | "xl";
    /**
    * Select theme (light or dark)
    */
    'theme'?: "light" | "dark";
    /**
    * specify the width of the button, defaults to auto
    */
    'width'?: "auto" | "half" | "full";
  }
  interface CalciteCard {
    /**
    * When true, the cards content is waiting to be loaded. This state shows a busy indicator.
    */
    'loading'?: boolean;
    /**
    * Fired when a selectable card is selected
    */
    'onCalciteCardSelected'?: (event: CustomEvent<any>) => void;
    /**
    * Indicates whether the card is selectable.
    */
    'selectable'?: boolean;
    /**
    * Indicates whether the card is selected.
    */
    'selected'?: boolean;
    /**
    * The theme of the card.
    */
    'theme'?: "light" | "dark";
  }
  interface CalciteCheckbox {
    /**
    * True if the checkbox is initially checked
    */
    'checked'?: boolean;
    /**
    * True if the checkbox is disabled
    */
    'disabled'?: boolean;
    /**
    * True if the checkbox is initially indeterminate, which is independent from its checked state https://css-tricks.com/indeterminate-checkboxes/
    */
    'indeterminate'?: boolean;
    /**
    * The name of the checkbox input
    */
    'name'?: string;
    /**
    * Emitted when the checkbox checked status changes
    */
    'onCalciteCheckboxChange'?: (event: CustomEvent<any>) => void;
    /**
    * Size of the checkbox
    */
    'size'?: "small" | "large";
    /**
    * Determines what theme to use
    */
    'theme'?: "light" | "dark";
    /**
    * The value of the checkbox input
    */
    'value'?: string;
  }
  interface CalciteDateDay {
    /**
    * Active tells whether day is Actively in focus.
    */
    'active'?: boolean;
    /**
    * day of the month to be shown.
    */
    'day'?: number;
    /**
    * Enables tells whether day enabled for the user click.
    */
    'enable'?: boolean;
    /**
    * When user selects day it emits the event.
    */
    'onCalciteDaySelect'?: (event: CustomEvent<any>) => void;
    /**
    * Selected tells whether day is selected.
    */
    'selected'?: boolean;
  }
  interface CalciteDateMonth {
    /**
    * Date currently active.
    */
    'activeDate'?: Date;
    /**
    * pass the locale in which user wants to show the date.
    */
    'locale'?: string;
    /**
    * Maximum date of the calendar above which is disabled.
    */
    'max'?: Date;
    /**
    * Minimum date of the calendar below which is disabled.
    */
    'min'?: Date;
    /**
    * Month number starting 0 as January for which the calendar is shown.
    */
    'month'?: number;
    /**
    * Active date for the user keyboard access.
    */
    'onCalciteActiveDateChange'?: (event: CustomEvent<any>) => void;
    /**
    * Event emitted when user selects the date.
    */
    'onCalciteDateSelect'?: (event: CustomEvent<any>) => void;
    /**
    * Already selected date.
    */
    'selectedDate'?: Date;
    /**
    * Sun by default 0: Sunday 1: Monday 2: Tuesday 3: Wednesday 4: Thursday 5: Friday 6: Saturday
    */
    'startOfWeek'?: number;
    /**
    * Year for which the calendar is shown.
    */
    'year'?: number;
  }
  interface CalciteDateMonthHeader {
    /**
    * pass the locale in which user wants to show the date.
    */
    'locale'?: string;
    /**
    * Maximum date of the calendar above which is disabled.
    */
    'max'?: Date;
    /**
    * Minimum date of the calendar below which is disabled.
    */
    'min'?: Date;
    /**
    * Month number starting 0 as January for which the calendar is shown.
    */
    'month'?: number;
    /**
    * Localized string for next month.
    */
    'nextMonthLabel'?: string;
    /**
    * Event triggered when user change month.
    */
    'onCalciteMonthChange'?: (event: CustomEvent<any>) => void;
    /**
    * Event triggered when user change year.
    */
    'onCalciteYearChange'?: (event: CustomEvent<any>) => void;
    /**
    * Localized string for previous month.
    */
    'prevMonthLabel'?: string;
    /**
    * Already selected date.
    */
    'selectedDate'?: Date;
    /**
    * Year for which the calendar is shown.
    */
    'year'?: number;
  }
  interface CalciteDatePicker {
    /**
    * pass the locale in which user wants to show the date.
    */
    'locale'?: string;
    /**
    * Value of the form control
    */
    'max'?: string;
    /**
    * Name of the form control (useful for specifying input/label relationship)
    */
    'min'?: string;
    /**
    * Localized string for next month.
    */
    'nextMonthLabel'?: string;
    /**
    * Show no input for only calendar popup
    */
    'noCalendarInput'?: boolean;
    /**
    * Trigger calcite date change when a user changes the date.
    */
    'onCalciteDateChange'?: (event: CustomEvent<any>) => void;
    /**
    * Localized string for place holder to the date picker input.
    */
    'placeholder'?: string;
    /**
    * Localized string for previous month.
    */
    'prevMonthLabel'?: string;
    /**
    * Expand or collapse when calendar does not have input.
    */
    'showCalendar'?: boolean;
    /**
    * Sun by default 0: Sunday 1: Monday 2: Tuesday 3: Wednesday 4: Thursday 5: Friday 6: Saturday
    */
    'startOfWeek'?: number;
    /**
    * Value of the form control
    */
    'value'?: string;
    /**
    * Input as Date
    */
    'valueAsDate'?: Date;
  }
  interface CalciteDropdown {
    'active'?: boolean;
    /**
    * specify the alignment of dropdrown, defaults to left
    */
    'alignment'?: | "left"
    | "right"
    | "center";
    /**
    * specify the scale of dropdrown, defaults to m
    */
    'scale'?: "s" | "m" | "l";
    /**
    * specify the theme of the dropdown, defaults to light
    */
    'theme'?: "light" | "dark";
    /**
    * specify whether the dropdown is opened by hover or click of the trigger element
    */
    'type'?: "hover" | "click";
    /**
    * specify the width of dropdrown, defaults to m
    */
    'width'?: "s" | "m" | "l";
  }
  interface CalciteDropdownGroup {
    /**
    * optionally set a group title for display
    */
    'groupTitle'?: string;
    'onCalciteDropdownItemHasChanged'?: (event: CustomEvent<any>) => void;
    'onRegisterCalciteDropdownGroup'?: (event: CustomEvent<any>) => void;
    /**
    * specify the selection mode - multi (allow any number of (or no) active items), single (allow and require one active item), none (no active items), defaults to single
    */
    'selectionMode'?: | "multi"
    | "single"
    | "none";
  }
  interface CalciteDropdownItem {
    'active'?: boolean;
    /**
    * pass an optional href to render an anchor around the link items
    */
    'href'?: string;
    /**
    * optionally pass an icon to display at the end of an item - accepts calcite ui icon names
    */
    'iconEnd'?: string;
    /**
    * optionally pass an icon to display at the start of an item - accepts calcite ui icon names
    */
    'iconStart'?: string;
    /**
    * pass an optional title for rendered href
    */
    'linkTitle'?: string;
    'onCalciteDropdownItemKeyEvent'?: (event: CustomEvent<any>) => void;
    'onCalciteDropdownItemMouseover'?: (event: CustomEvent<any>) => void;
    'onCalciteDropdownItemSelected'?: (event: CustomEvent<any>) => void;
    'onCloseCalciteDropdown'?: (event: CustomEvent<any>) => void;
    'onRegisterCalciteDropdownItem'?: (event: CustomEvent<any>) => void;
  }
  interface CalciteExample {
    'onOpen'?: (event: CustomEvent<any>) => void;
    /**
    * Be sure to add a jsdoc comment describing your property for the generated readme file. If your property should be hidden from documentation, you can use the `@internal` tag
    */
    'property'?: string;
  }
  interface CalciteIcon {
    /**
    * When true, the icon will be filled.
    */
    'filled'?: boolean;
    /**
    * The name of the icon to display. The value of this property must match the icon name from https://esri.github.io/calcite-ui-icons/.
    */
    'icon'?: string;
    /**
    * When true, the icon will be mirrored when the element direction is 'rtl'.
    */
    'mirrored'?: boolean;
    /**
    * Icon scale. Can be "s" | "m" | "l".
    */
    'scale'?: Scale;
    /**
    * The icon label.  It is recommended to set this value if your icon is semantic.
    */
    'textLabel'?: string;
    /**
    * Icon theme. Can be "light" or "dark".
    */
    'theme'?: Theme;
  }
  interface CalciteLoader {
    /**
    * Inline loaders are smaller and will appear to the left of the text
    */
    'inline'?: boolean;
    /**
    * Show the loader
    */
    'isActive'?: boolean;
    /**
    * Turn off spacing around the loader
    */
    'noPadding'?: boolean;
    /**
    * Text which should appear under the loading indicator (optional)
    */
    'text'?: string;
    /**
    * Use indeterminate if finding actual progress value is impossible
    */
    'type'?: "indeterminate" | "determinate";
    /**
    * Percent complete of 100, only valid for determinate indicators
    */
    'value'?: number;
  }
  interface CalciteModal {
    /**
    * Optionally pass a function to run before close
    */
    'beforeClose'?: (el: HTMLElement) => Promise<void>;
    /**
    * Aria label for the close button
    */
    'closeLabel'?: string;
    /**
    * Adds a color bar at the top for visual impact, Use color to add importance to desctructive/workflow dialogs.
    */
    'color'?: "red" | "blue";
    /**
    * Flag to disable the default close on escape behavior
    */
    'disableEscape'?: boolean;
    /**
    * Prevent the modal from taking up the entire screen on mobile
    */
    'docked'?: boolean;
    /**
    * Specify an element to focus when the modal is first opened
    */
    'firstFocus'?: HTMLElement;
    /**
    * Turn off spacing around the content area slot
    */
    'noPadding'?: boolean;
    /**
    * Fired when the modal begins the close animation
    */
    'onCalciteModalClose'?: (event: CustomEvent<any>) => void;
    /**
    * Fired when the modal begins the open animation
    */
    'onCalciteModalOpen'?: (event: CustomEvent<any>) => void;
    /**
    * Set the overall size of the modal
    */
    'size'?: "small" | "medium" | "large" | "fullscreen";
    /**
    * Select theme (light or dark)
    */
    'theme'?: "light" | "dark";
  }
  interface CalciteNotice {
    /**
    * Is the notice currently active or not
    */
    'active'?: boolean;
    /**
    * Color for the notice (will apply to top border and icon)
    */
    'color'?: | "blue"
    | "green"
    | "red"
    | "yellow";
    /**
    * Select theme (light or dark)
    */
    'dismissible'?: boolean;
    /**
    * If false, no icon will be shown in the notice
    */
    'icon'?: boolean;
    /**
    * Fired when an notice is closed
    */
    'onCalciteNoticeClose'?: (event: CustomEvent<any>) => void;
    /**
    * Fired when an Notice is opened
    */
    'onCalciteNoticeOpen'?: (event: CustomEvent<any>) => void;
    /**
    * specify the scale of the notice, defaults to m
    */
    'scale'?: "s" | "m" | "l";
    /**
    * Select theme (light or dark)
    */
    'theme'?: "light" | "dark";
    /**
    * specify the scale of the button, defaults to m
    */
    'width'?: "auto" | "half" | "full";
  }
  interface CalcitePagination {
    /**
    * Change between foreground colors or background colors for container background
    */
    'backgroundStyle'?: "backgroundColor" | "foregroundColor";
    /**
    * starting selected index
    */
    'num'?: number;
    /**
    * Emitted whenever the selected page changes.
    * @event calcitePaginationUpdate
    */
    'onCalcitePaginationUpdate'?: (event: CustomEvent<any>) => void;
    /**
    * starting number of the pagination
    */
    'start'?: number;
    /**
    * title of the next button
    */
    'textLabelNext'?: string;
    /**
    * title of the previous button
    */
    'textLabelPrevious'?: string;
    /**
    * specify the theme of accordion, defaults to light
    */
    'theme'?: "light" | "dark";
    /**
    * ending number of the pagination
    */
    'total'?: number;
  }
  interface CalcitePopover {
    /**
    * Adds a click handler to the referenceElement to toggle open the Popover.
    */
    'addClickHandle'?: boolean;
    /**
    * Display a close button within the Popover.
    */
    'closeButton'?: boolean;
    /**
    * Prevents flipping the popover's placement when it starts to overlap its reference element.
    */
    'disableFlip'?: boolean;
    /**
    * Removes the caret pointer.
    */
    'disablePointer'?: boolean;
    /**
    * Defines the available placements that can be used when a flip occurs.
    */
    'flipPlacements'?: Placement[];
    /**
    * Offset the position of the popover away from the reference element.
    */
    'offsetDistance'?: number;
    /**
    * Offset the position of the popover along the reference element.
    */
    'offsetSkidding'?: number;
    /**
    * Fired when the popover is closed
    */
    'onCalcitePopoverClose'?: (event: CustomEvent<any>) => void;
    /**
    * Fired when the popover is opened
    */
    'onCalcitePopoverOpen'?: (event: CustomEvent<any>) => void;
    /**
    * Display and position the component.
    */
    'open'?: boolean;
    /**
    * Determines where the component will be positioned relative to the referenceElement.
    */
    'placement'?: CalcitePlacement;
    /**
    * Reference HTMLElement used to position this component according to the placement property.
    */
    'referenceElement': HTMLElement | string;
    /**
    * Text for close button.
    */
    'textClose'?: string;
    /**
    * Select theme (light or dark)
    */
    'theme'?: "light" | "dark";
  }
  interface CalciteProgress {
    /**
    * Fill bar in the opposite direction
    */
    'reversed'?: boolean;
    /**
    * Text label for the progress indicator
    */
    'text'?: string;
    /**
    * Select theme (light or dark)
    */
    'theme'?: "light" | "dark";
    /**
    * Use indeterminate if finding actual progress value is impossible
    */
    'type'?: "indeterminate" | "determinate";
    /**
    * Percent complete of 100
    */
    'value'?: number;
  }
  interface CalciteRadioGroup {
    /**
    * The group's name. Gets submitted with the form.
    */
    'name'?: string;
    'onCalciteRadioGroupChange'?: (event: CustomEvent<any>) => void;
    /**
    * The scale of the button
    */
    'scale'?: "s" | "m" | "l";
    /**
    * The group's selected item.
    */
    'selectedItem'?: HTMLCalciteRadioGroupItemElement;
    /**
    * The component's theme.
    */
    'theme'?: "light" | "dark";
  }
  interface CalciteRadioGroupItem {
    /**
    * Indicates whether the control is checked.
    */
    'checked'?: boolean;
    'onCalciteRadioGroupItemChange'?: (event: CustomEvent<any>) => void;
    /**
    * The control's value.
    */
    'value'?: any | null;
  }
  interface CalciteSlider {
    /**
    * Disable and gray out the slider
    */
    'disabled'?: boolean;
    /**
    * Label handles with their numeric value
    */
    'labelHandles'?: boolean;
    /**
    * Label tick marks with their numeric value.
    */
    'labelTicks'?: boolean;
    /**
    * Maximum selectable value
    */
    'max'?: number;
    /**
    * Label for second handle if needed (ex. "Temperature, upper bound")
    */
    'maxLabel'?: string;
    /**
    * Currently selected upper number (if multi-select)
    */
    'maxValue'?: number;
    /**
    * Minimum selectable value
    */
    'min'?: number;
    /**
    * Label for first (or only) handle (ex. "Temperature, lower bound")
    */
    'minLabel'?: string;
    /**
    * Currently selected lower number (if multi-select)
    */
    'minValue'?: number;
    /**
    * Fires on all updates to the slider. :warning: Will be fired frequently during drag. If you are performing any expensive operations consider using a debounce or throttle to avoid locking up the main thread.
    */
    'onCalciteSliderUpdate'?: (event: CustomEvent<any>) => void;
    /**
    * Interval to move on page up/page down keys
    */
    'pageStep'?: number;
    /**
    * Use finer point for handles
    */
    'precise'?: boolean;
    /**
    * Snap selection along the step interval
    */
    'snap'?: boolean;
    /**
    * Interval to move on up/down keys
    */
    'step'?: number;
    /**
    * Select theme (light or dark)
    */
    'theme'?: "light" | "dark";
    /**
    * Show tick marks on the number line at provided interval
    */
    'ticks'?: number;
    /**
    * Currently selected number (if single select)
    */
    'value'?: null | number;
  }
  interface CalciteSwitch {
    /**
    * What color the switch should be
    */
    'color'?: "red" | "blue";
    /**
    * The name of the checkbox input
    */
    'name'?: string;
    'onCalciteSwitchChange'?: (event: CustomEvent<any>) => void;
    /**
    * The scale of the button
    */
    'scale'?: "s" | "m" | "l";
    /**
    * True if the switch is initially on
    */
    'switched'?: boolean;
    /**
    * The component's theme.
    */
    'theme'?: "light" | "dark";
    /**
    * The value of the checkbox input
    */
    'value'?: string;
  }
  interface CalciteTab {
    /**
    * Show this tab
    */
    'isActive'?: boolean;
    /**
    * Optionally include a unique name for this tab, be sure to also set this name on the associated title.
    */
    'tab'?: string;
  }
  interface CalciteTabNav {
    /**
    * Emitted when the active tab changes
    */
    'onCalciteTabChange'?: (event: CustomEvent<TabChangeEventDetail>) => void;
    /**
    * Name to use when saving selected tab data to localStorage
    */
    'storageId'?: string;
    /**
    * Pass the same string to multiple tab navs to keep them all in sync if one changes
    */
    'syncId'?: string;
  }
  interface CalciteTabTitle {
    /**
    * Show this tab title as selected
    */
    'isActive'?: boolean;
    /**
    * Fires when a specific tab is activated. `event.details`: [TabChangeEventDetail](../../interfaces/TabChange.ts)
    */
    'onCalciteTabsActivate'?: (event: CustomEvent<TabChangeEventDetail>) => void;
    /**
    * Optionally include a unique name for the tab title, be sure to also set this name on the associated tab.
    */
    'tab'?: string;
  }
  interface CalciteTabs {
    /**
    * Align tab titles to the edge or fully justify them across the tab nav ("center")
    */
    'layout'?: "center" | "inline";
    /**
    * Select theme (light or dark)
    */
    'theme'?: "light" | "dark";
  }
  interface CalciteTooltip {
    /**
    * Offset the position of the popover away from the reference element.
    */
    'offsetDistance'?: number;
    /**
    * Offset the position of the popover along the reference element.
    */
    'offsetSkidding'?: number;
    /**
    * Display and position the component.
    */
    'open'?: boolean;
    /**
    * Determines where the component will be positioned relative to the referenceElement.
    */
    'placement'?: CalcitePlacement;
    /**
    * Reference HTMLElement used to position this component.
    */
    'referenceElement': HTMLElement | string;
    /**
    * Select theme (light or dark)
    */
    'theme'?: "light" | "dark";
  }
  interface CalciteTree {
    /**
    * Be sure to add a jsdoc comment describing your propery for the generated readme file. If your property should be hidden from documentation, you can use the `@internal` tag
    */
    'lines'?: boolean;
    'onCalciteTreeSelect'?: (event: CustomEvent<TreeSelectDetail>) => void;
    'root'?: boolean;
    'selectionMode'?: TreeSelectionMode;
    'size'?: "s" | "m";
    'theme'?: "light" | "dark";
  }
  interface CalciteTreeItem {
    'depth'?: number;
    'expanded'?: boolean;
    'hasChildren'?: boolean;
    'onCalciteTreeItemSelect'?: (event: CustomEvent<TreeItemSelectDetail>) => void;
    'parentExpanded'?: boolean;
    /**
    * Be sure to add a jsdoc comment describing your property for the generated readme file. If your property should be hidden from documentation, you can use the `@internal` tag
    */
    'selected'?: boolean;
  }

  interface IntrinsicElements {
    'calcite-accordion': CalciteAccordion;
    'calcite-accordion-item': CalciteAccordionItem;
    'calcite-alert': CalciteAlert;
    'calcite-button': CalciteButton;
    'calcite-card': CalciteCard;
    'calcite-checkbox': CalciteCheckbox;
    'calcite-date-day': CalciteDateDay;
    'calcite-date-month': CalciteDateMonth;
    'calcite-date-month-header': CalciteDateMonthHeader;
    'calcite-date-picker': CalciteDatePicker;
    'calcite-dropdown': CalciteDropdown;
    'calcite-dropdown-group': CalciteDropdownGroup;
    'calcite-dropdown-item': CalciteDropdownItem;
    'calcite-example': CalciteExample;
    'calcite-icon': CalciteIcon;
    'calcite-loader': CalciteLoader;
    'calcite-modal': CalciteModal;
    'calcite-notice': CalciteNotice;
    'calcite-pagination': CalcitePagination;
    'calcite-popover': CalcitePopover;
    'calcite-progress': CalciteProgress;
    'calcite-radio-group': CalciteRadioGroup;
    'calcite-radio-group-item': CalciteRadioGroupItem;
    'calcite-slider': CalciteSlider;
    'calcite-switch': CalciteSwitch;
    'calcite-tab': CalciteTab;
    'calcite-tab-nav': CalciteTabNav;
    'calcite-tab-title': CalciteTabTitle;
    'calcite-tabs': CalciteTabs;
    'calcite-tooltip': CalciteTooltip;
    'calcite-tree': CalciteTree;
    'calcite-tree-item': CalciteTreeItem;
  }
}

export { LocalJSX as JSX };


declare module "@stencil/core" {
  export namespace JSX {
    interface IntrinsicElements {
      'calcite-accordion': LocalJSX.CalciteAccordion & JSXBase.HTMLAttributes<HTMLCalciteAccordionElement>;
      'calcite-accordion-item': LocalJSX.CalciteAccordionItem & JSXBase.HTMLAttributes<HTMLCalciteAccordionItemElement>;
      'calcite-alert': LocalJSX.CalciteAlert & JSXBase.HTMLAttributes<HTMLCalciteAlertElement>;
      'calcite-button': LocalJSX.CalciteButton & JSXBase.HTMLAttributes<HTMLCalciteButtonElement>;
      'calcite-card': LocalJSX.CalciteCard & JSXBase.HTMLAttributes<HTMLCalciteCardElement>;
      'calcite-checkbox': LocalJSX.CalciteCheckbox & JSXBase.HTMLAttributes<HTMLCalciteCheckboxElement>;
      'calcite-date-day': LocalJSX.CalciteDateDay & JSXBase.HTMLAttributes<HTMLCalciteDateDayElement>;
      'calcite-date-month': LocalJSX.CalciteDateMonth & JSXBase.HTMLAttributes<HTMLCalciteDateMonthElement>;
      'calcite-date-month-header': LocalJSX.CalciteDateMonthHeader & JSXBase.HTMLAttributes<HTMLCalciteDateMonthHeaderElement>;
      'calcite-date-picker': LocalJSX.CalciteDatePicker & JSXBase.HTMLAttributes<HTMLCalciteDatePickerElement>;
      'calcite-dropdown': LocalJSX.CalciteDropdown & JSXBase.HTMLAttributes<HTMLCalciteDropdownElement>;
      'calcite-dropdown-group': LocalJSX.CalciteDropdownGroup & JSXBase.HTMLAttributes<HTMLCalciteDropdownGroupElement>;
      'calcite-dropdown-item': LocalJSX.CalciteDropdownItem & JSXBase.HTMLAttributes<HTMLCalciteDropdownItemElement>;
      'calcite-example': LocalJSX.CalciteExample & JSXBase.HTMLAttributes<HTMLCalciteExampleElement>;
      'calcite-icon': LocalJSX.CalciteIcon & JSXBase.HTMLAttributes<HTMLCalciteIconElement>;
      'calcite-loader': LocalJSX.CalciteLoader & JSXBase.HTMLAttributes<HTMLCalciteLoaderElement>;
      'calcite-modal': LocalJSX.CalciteModal & JSXBase.HTMLAttributes<HTMLCalciteModalElement>;
      'calcite-notice': LocalJSX.CalciteNotice & JSXBase.HTMLAttributes<HTMLCalciteNoticeElement>;
      'calcite-pagination': LocalJSX.CalcitePagination & JSXBase.HTMLAttributes<HTMLCalcitePaginationElement>;
      'calcite-popover': LocalJSX.CalcitePopover & JSXBase.HTMLAttributes<HTMLCalcitePopoverElement>;
      'calcite-progress': LocalJSX.CalciteProgress & JSXBase.HTMLAttributes<HTMLCalciteProgressElement>;
      'calcite-radio-group': LocalJSX.CalciteRadioGroup & JSXBase.HTMLAttributes<HTMLCalciteRadioGroupElement>;
      'calcite-radio-group-item': LocalJSX.CalciteRadioGroupItem & JSXBase.HTMLAttributes<HTMLCalciteRadioGroupItemElement>;
      'calcite-slider': LocalJSX.CalciteSlider & JSXBase.HTMLAttributes<HTMLCalciteSliderElement>;
      'calcite-switch': LocalJSX.CalciteSwitch & JSXBase.HTMLAttributes<HTMLCalciteSwitchElement>;
      'calcite-tab': LocalJSX.CalciteTab & JSXBase.HTMLAttributes<HTMLCalciteTabElement>;
      'calcite-tab-nav': LocalJSX.CalciteTabNav & JSXBase.HTMLAttributes<HTMLCalciteTabNavElement>;
      'calcite-tab-title': LocalJSX.CalciteTabTitle & JSXBase.HTMLAttributes<HTMLCalciteTabTitleElement>;
      'calcite-tabs': LocalJSX.CalciteTabs & JSXBase.HTMLAttributes<HTMLCalciteTabsElement>;
      'calcite-tooltip': LocalJSX.CalciteTooltip & JSXBase.HTMLAttributes<HTMLCalciteTooltipElement>;
      'calcite-tree': LocalJSX.CalciteTree & JSXBase.HTMLAttributes<HTMLCalciteTreeElement>;
      'calcite-tree-item': LocalJSX.CalciteTreeItem & JSXBase.HTMLAttributes<HTMLCalciteTreeItemElement>;
    }
  }
}


