/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "./stencil-public-runtime";
import { GroupRegistration, ItemRegistration, } from "./interfaces/Dropdown";
import { Scale, } from "./interfaces/Icon";
import { Theme, } from "./interfaces/common";
import { CalcitePaginationDetail, } from "./components/calcite-pagination/calcite-pagination";
import { Placement, } from "@popperjs/core";
import { CalcitePlacement, } from "./utils/popper";
import { TabChangeEventDetail, } from "./interfaces/TabChange";
import { TreeSelectionMode, } from "./interfaces/TreeSelectionMode";
import { TreeSelectDetail, } from "./interfaces/TreeSelect";
import { TreeItemSelectDetail, } from "./interfaces/TreeItemSelect";
export namespace Components {
    interface CalciteAccordion {
        /**
          * specify the appearance - default (containing border), or minimal (no containing border), defaults to default
         */
        "appearance": "default" | "minimal" | "transparent";
        /**
          * specify the placement of the icon in the header, defaults to end
         */
        "iconPosition": "start" | "end";
        /**
          * specify the type of the icon in the header, defaults to chevron
         */
        "iconType": "chevron" | "caret" | "plus-minus";
        /**
          * specify the scale of accordion, defaults to m
         */
        "scale": "s" | "m" | "l";
        /**
          * specify the selection mode - multi (allow any number of open items), single (allow one open item), or single-persist (allow and require one open item), defaults to multi
         */
        "selectionMode": "multi" | "single" | "single-persist";
        /**
          * specify the theme of accordion, defaults to light
         */
        "theme": "light" | "dark";
    }
    interface CalciteAccordionItem {
        "active": boolean;
        /**
          * optionally pass an icon to display - accepts Calcite UI icon names
         */
        "icon"?: string;
        /**
          * pass a title for the accordion item
         */
        "itemSubtitle"?: string;
        /**
          * pass a title for the accordion item
         */
        "itemTitle"?: string;
    }
    interface CalciteAlert {
        /**
          * Is the alert currently active or not
         */
        "active": boolean;
        /**
          * a managed list of alerts
         */
        "alertQueue": string[];
        /**
          * a managed list of alerts
         */
        "alertQueueLength": number;
        /**
          * Close the alert automatically (recommended for passive, non-blocking alerts)
         */
        "autoDismiss": boolean;
        /**
          * Duration of autoDismiss (only used with `autoDismiss`)
         */
        "autoDismissDuration": "fast" | "medium" | "slow";
        /**
          * close alert and emit the closed alert
         */
        "close": () => Promise<void>;
        /**
          * Color for the alert (will apply to top border and icon)
         */
        "color": "blue" | "green" | "red" | "yellow";
        /**
          * the determined current alert
         */
        "currentAlert": string;
        /**
          * specify if the alert should display an icon
         */
        "icon": boolean;
        /**
          * open alert and emit the opened alert
         */
        "open": () => Promise<void>;
        /**
          * specify the scale of the button, defaults to m
         */
        "scale": "s" | "m" | "l";
        /**
          * focus the close button, if present and requested
         */
        "setFocus": () => Promise<void>;
        /**
          * Select theme (light or dark)
         */
        "theme": "light" | "dark";
    }
    interface CalciteButton {
        /**
          * specify the appearance style of the button, defaults to solid.
         */
        "appearance": "solid" | "outline" | "clear" | "transparent";
        /**
          * specify the color of the button, defaults to blue
         */
        "color": "blue" | "dark" | "light" | "red";
        /**
          * is the button disabled
         */
        "disabled"?: boolean;
        /**
          * optionally add a floating style to the button - this should be positioned fixed or sticky
         */
        "floating"?: boolean;
        /**
          * optionally pass a href - used to determine if the component should render as a button or an anchor
         */
        "href"?: string;
        /**
          * optionally pass an icon to display - accepts Calcite UI icon names
         */
        "icon"?: string;
        /**
          * optionally used with icon, select where to position the icon
         */
        "iconPosition"?: "start" | "end";
        /**
          * optionally add a calcite-loader component to the button, disabling interaction.
         */
        "loading"?: boolean;
        /**
          * optionally add a round style to the button
         */
        "round"?: boolean;
        /**
          * specify the scale of the button, defaults to m
         */
        "scale": "xs" | "s" | "m" | "l" | "xl";
        "setFocus": () => Promise<void>;
        /**
          * Select theme (light or dark)
         */
        "theme": "light" | "dark";
        /**
          * specify the width of the button, defaults to auto
         */
        "width": "auto" | "half" | "full";
    }
    interface CalciteCard {
        /**
          * When true, the cards content is waiting to be loaded. This state shows a busy indicator.
         */
        "loading": boolean;
        /**
          * Indicates whether the card is selectable.
         */
        "selectable": boolean;
        /**
          * Indicates whether the card is selected.
         */
        "selected": boolean;
        /**
          * The theme of the card.
         */
        "theme": "light" | "dark";
    }
    interface CalciteCheckbox {
        /**
          * True if the checkbox is initially checked
         */
        "checked"?: boolean;
        /**
          * True if the checkbox is disabled
         */
        "disabled"?: boolean;
        /**
          * True if the checkbox is initially indeterminate, which is independent from its checked state https://css-tricks.com/indeterminate-checkboxes/
         */
        "indeterminate"?: boolean;
        /**
          * The name of the checkbox input
         */
        "name"?: string;
        /**
          * Size of the checkbox
         */
        "size"?: "small" | "large";
        /**
          * Determines what theme to use
         */
        "theme": "light" | "dark";
        /**
          * The value of the checkbox input
         */
        "value"?: string;
    }
    interface CalciteChip {
        /**
          * optionally pass an icon to display - accepts Calcite UI icon names
         */
        "icon"?: string;
        /**
          * specify the scale of the chip, defaults to m
         */
        "scale": "xs" | "s" | "m" | "l" | "xl";
        /**
          * Select theme (light or dark)
         */
        "theme": "light" | "dark";
        "value": string;
    }
    interface CalciteCombobox {
        "active": boolean;
        "disabled": boolean;
        "label": string;
        "placeholder"?: string;
        /**
          * specify the scale of the combobox, defaults to m
         */
        "scale": "xs" | "s" | "m" | "l" | "xl";
        /**
          * Select theme (light or dark)
         */
        "theme": "light" | "dark";
    }
    interface CalciteComboboxItem {
        "disabled": boolean;
        "parentItem"?: HTMLCalciteComboboxItemElement;
        "selected": boolean;
        "textLabel": string;
        /**
          * Used to toggle the selection state. By default this won't trigger an event. The first argument allows the value to be coerced, rather than swapping values.
         */
        "toggleSelected": (coerce?: boolean) => Promise<void>;
        "value": string;
    }
    interface CalciteDate {
        /**
          * Expand or collapse when calendar does not have input
         */
        "active": boolean;
        /**
          * BCP 47 language tag for desired language and country format
         */
        "locale"?: string;
        /**
          * Latest allowed date ("yyyy-mm-dd")
         */
        "max"?: string;
        /**
          * Earliest allowed date ("yyyy-mm-dd")
         */
        "min"?: string;
        /**
          * Localized string for "next month"
         */
        "nextMonthLabel"?: string;
        /**
          * Show only calendar popup
         */
        "noCalendarInput"?: boolean;
        /**
          * Localized string for "previous month"
         */
        "prevMonthLabel"?: string;
        /**
          * specify the scale of the date picker
         */
        "scale": "s" | "m" | "l";
        /**
          * Selected date
         */
        "value"?: string;
        /**
          * Selected date as full date object
         */
        "valueAsDate"?: Date;
    }
    interface CalciteDateDay {
        /**
          * Date is actively in focus for keyboard navigation
         */
        "active": boolean;
        /**
          * Date is in the current month.
         */
        "currentMonth": boolean;
        /**
          * Day of the month to be shown.
         */
        "day": number;
        /**
          * Date is outside of range and can't be selected
         */
        "disabled": boolean;
        /**
          * Locale to display the day in
         */
        "locale": string;
        /**
          * specify the scale of the date picker
         */
        "scale": "s" | "m" | "l";
        /**
          * Date is the current selected date of the picker
         */
        "selected": boolean;
    }
    interface CalciteDateMonth {
        /**
          * Date currently active.
         */
        "activeDate": Date;
        /**
          * User's language and region as BCP 47 formatted string.
         */
        "locale": string;
        /**
          * Maximum date of the calendar above which is disabled.
         */
        "max": Date;
        /**
          * Minimum date of the calendar below which is disabled.
         */
        "min": Date;
        /**
          * specify the scale of the date picker
         */
        "scale": "s" | "m" | "l";
        /**
          * Already selected date.
         */
        "selectedDate": Date;
    }
    interface CalciteDateMonthHeader {
        /**
          * Focused date with indicator (will become selected date if user proceeds)
         */
        "activeDate": Date;
        /**
          * User's language and region as BCP 47 formatted string.
         */
        "locale": string;
        /**
          * Maximum date of the calendar above which is disabled.
         */
        "max": Date;
        /**
          * Minimum date of the calendar below which is disabled.
         */
        "min": Date;
        /**
          * Localized string for next month.
         */
        "nextMonthLabel": string;
        /**
          * Localized string for previous month.
         */
        "prevMonthLabel": string;
        /**
          * specify the scale of the date picker
         */
        "scale": "s" | "m" | "l";
        /**
          * Already selected date.
         */
        "selectedDate": Date;
    }
    interface CalciteDropdown {
        "active": boolean;
        /**
          * specify the alignment of dropdown, defaults to start
         */
        "alignment": "start" | "center" | "end";
        /**
          * specify the max items to display before showing the scroller, must be greater than 0 *
         */
        "maxItems": number;
        /**
          * specify the scale of dropdown, defaults to m
         */
        "scale": "s" | "m" | "l";
        /**
          * specify the theme of the dropdown, defaults to light
         */
        "theme": "light" | "dark";
        /**
          * specify whether the dropdown is opened by hover or click of the trigger element
         */
        "type": "hover" | "click";
        /**
          * specify the width of dropdown, defaults to m
         */
        "width": "s" | "m" | "l";
    }
    interface CalciteDropdownGroup {
        /**
          * optionally set a group title for display
         */
        "groupTitle"?: string;
        /**
          * specify the selection mode - multi (allow any number of (or no) active items), single (allow and require one active item), none (no active items), defaults to single
         */
        "selectionMode": "multi" | "single" | "none";
    }
    interface CalciteDropdownItem {
        "active": boolean;
        /**
          * optionally pass a href - used to determine if the component should render as anchor
         */
        "href"?: string;
        /**
          * optionally pass an icon to display at the end of an item - accepts calcite ui icon names
         */
        "iconEnd"?: string;
        /**
          * optionally pass an icon to display at the start of an item - accepts calcite ui icon names
         */
        "iconStart"?: string;
        /**
          * Focuses the selected item.
         */
        "setFocus": () => Promise<void>;
    }
    interface CalciteExample {
        /**
          * Add a jsdoc comment describing your method and it's parameters (use `@param`).
         */
        "doThing": () => Promise<void>;
        /**
          * Be sure to add a jsdoc comment describing your property for the generated readme file. If your property should be hidden from documentation, you can use the `@internal` tag
         */
        "property": string;
    }
    interface CalciteIcon {
        /**
          * The name of the icon to display. The value of this property must match the icon name from https://esri.github.io/calcite-ui-icons/.
         */
        "icon": string;
        /**
          * When true, the icon will be mirrored when the element direction is 'rtl'.
         */
        "mirrored": boolean;
        /**
          * Icon scale. Can be "s" | "m" | "l".
         */
        "scale": Scale;
        /**
          * The icon label.  It is recommended to set this value if your icon is semantic.
         */
        "textLabel": string;
        /**
          * Icon theme. Can be "light" or "dark".
         */
        "theme": Theme;
    }
    interface CalciteInput {
        /**
          * specify the alignment of the value of the input
         */
        "alignment": "start" | "end";
        /**
          * should the input autofocus
         */
        "autofocus": boolean;
        /**
          * for recognized input types, show an icon if applicable
         */
        "icon": string | boolean;
        /**
          * specify if the input is in loading state
         */
        "loading": boolean;
        /**
          * input max
         */
        "max"?: string;
        /**
          * input min
         */
        "min"?: string;
        /**
          * specify the placement of the number buttons
         */
        "numberButtonType"?: "vertical" | "horizontal" | "none";
        /**
          * explicitly whitelist placeholder attribute
         */
        "placeholder": string;
        /**
          * optionally add prefix  *
         */
        "prefixText"?: string;
        /**
          * is the input required
         */
        "required": boolean;
        /**
          * specify the scale of the input, defaults to m
         */
        "scale": "s" | "m" | "l";
        /**
          * focus the rendered child element
         */
        "setFocus": () => Promise<void>;
        /**
          * specify the status of the input field, determines message and icons
         */
        "status": "invalid" | "valid" | "idle";
        /**
          * input step
         */
        "step"?: string;
        /**
          * optionally add suffix  *
         */
        "suffixText"?: string;
        /**
          * specify the alignment of dropdown, defaults to left
         */
        "theme": "light" | "dark";
        /**
          * specify the input type
         */
        "type": "color" | "date" | "datetime-local" | "email" | "file" | "image" | "month" | "number" | "password" | "search" | "tel" | "text" | "textarea" | "time" | "url" | "week";
        /**
          * input value
         */
        "value"?: string;
    }
    interface CalciteInputMessage {
        "active": boolean;
        /**
          * specify the appearance type - minimal or default
         */
        "appearance": "default" | "minimal";
        /**
          * optionally display an icon based on status
         */
        "icon": boolean;
        /**
          * specify the scale of the input, defaults to m
         */
        "scale": "s" | "m" | "l";
        /**
          * specify the status of the input field, determines message and icons
         */
        "status": "invalid" | "valid" | "idle";
        /**
          * specify the theme, defaults to light
         */
        "theme": "light" | "dark";
        /**
          * specify the appearance of any slotted message - default (displayed under input), or floating (positioned absolutely under input)
         */
        "type": "default" | "floating";
    }
    interface CalciteLabel {
        /**
          * is the wrapped element positioned inline with the label slotted text
         */
        "layout": "inline" | "inline-space-between" | "default";
        /**
          * specify the scale of the input, defaults to m
         */
        "scale": "s" | "m" | "l";
        /**
          * specify the status of the label and any child input / input messages
         */
        "status": "invalid" | "valid" | "idle";
        /**
          * specify theme of the lavel and its any child input / input messages
         */
        "theme": "light" | "dark";
    }
    interface CalciteLink {
        /**
          * specify the color of the link, defaults to blue
         */
        "color": "blue" | "dark" | "light" | "red";
        /**
          * is the link disabled
         */
        "disabled"?: boolean;
        /**
          * optionally pass a href - used to determine if the component should render as a link or an anchor
         */
        "href"?: string;
        /**
          * optionally pass an icon to display - accepts Calcite UI icon names
         */
        "icon"?: string;
        /**
          * optionally used with icon, select where to position the icon
         */
        "iconPosition"?: "start" | "end";
        "setFocus": () => Promise<void>;
        /**
          * Select theme (light or dark)
         */
        "theme": "light" | "dark";
    }
    interface CalciteLoader {
        /**
          * Inline loaders are smaller and will appear to the left of the text
         */
        "inline": boolean;
        /**
          * Show the loader
         */
        "isActive": boolean;
        /**
          * Turn off spacing around the loader
         */
        "noPadding"?: boolean;
        /**
          * Text which should appear under the loading indicator (optional)
         */
        "text": string;
        /**
          * Use indeterminate if finding actual progress value is impossible
         */
        "type": "indeterminate" | "determinate";
        /**
          * Percent complete of 100, only valid for determinate indicators
         */
        "value": number;
    }
    interface CalciteModal {
        /**
          * Optionally pass a function to run before close
         */
        "beforeClose": (el: HTMLElement) => Promise<void>;
        /**
          * Close the modal, first running the `beforeClose` method
         */
        "close": () => Promise<HTMLElement>;
        /**
          * Aria label for the close button
         */
        "closeLabel": string;
        /**
          * Adds a color bar at the top for visual impact, Use color to add importance to desctructive/workflow dialogs.
         */
        "color"?: "red" | "blue";
        /**
          * Flag to disable the default close on escape behavior
         */
        "disableEscape"?: boolean;
        /**
          * Prevent the modal from taking up the entire screen on mobile
         */
        "docked": boolean;
        /**
          * Specify an element to focus when the modal is first opened
         */
        "firstFocus"?: HTMLElement;
        /**
          * Focus first interactive element
         */
        "focusElement": (el?: HTMLElement) => Promise<void>;
        /**
          * Turn off spacing around the content area slot
         */
        "noPadding"?: boolean;
        /**
          * Open the modal
         */
        "open": () => Promise<HTMLElement>;
        /**
          * Set the scroll top of the modal content
         */
        "scrollContent": (top?: number, left?: number) => Promise<void>;
        /**
          * Set the overall size of the modal
         */
        "size": "small" | "medium" | "large" | "fullscreen";
        /**
          * Select theme (light or dark)
         */
        "theme": "light" | "dark";
    }
    interface CalciteNotice {
        /**
          * Is the notice currently active or not
         */
        "active": boolean;
        /**
          * close the notice emit the `calciteNoticeClose` event - <calcite-notice> listens for this
         */
        "close": () => Promise<void>;
        /**
          * Color for the notice (will apply to top border and icon)
         */
        "color": "blue" | "green" | "red" | "yellow";
        /**
          * Select theme (light or dark)
         */
        "dismissible"?: boolean;
        /**
          * If false, no icon will be shown in the notice
         */
        "icon": boolean;
        /**
          * open the notice and emit the `calciteNoticeOpen` event - <calcite-notice> listens for this
         */
        "open": () => Promise<void>;
        /**
          * specify the scale of the notice, defaults to m
         */
        "scale": "s" | "m" | "l";
        /**
          * focus the close button, if present and requested
         */
        "setFocus": () => Promise<void>;
        /**
          * Select theme (light or dark)
         */
        "theme": "light" | "dark";
        /**
          * specify the width of the notice, defaults to m
         */
        "width": "auto" | "half" | "full";
    }
    interface CalcitePagination {
        /**
          * Go to the next page of results
         */
        "nextPage": () => Promise<void>;
        /**
          * number of items per page
         */
        "num": number;
        /**
          * Go to the previous page of results
         */
        "previousPage": () => Promise<void>;
        /**
          * The scale of the pagination
         */
        "scale": "s" | "m" | "l";
        /**
          * index of item that should begin the page
         */
        "start": number;
        /**
          * title of the next button
         */
        "textLabelNext": string;
        /**
          * title of the previous button
         */
        "textLabelPrevious": string;
        /**
          * specify the theme of accordion, defaults to light
         */
        "theme": "light" | "dark";
        /**
          * total number of items
         */
        "total": number;
    }
    interface CalcitePopover {
        /**
          * Display a close button within the Popover.
         */
        "closeButton": boolean;
        /**
          * Prevents flipping the popover's placement when it starts to overlap its reference element.
         */
        "disableFlip": boolean;
        /**
          * Removes the caret pointer.
         */
        "disablePointer": boolean;
        /**
          * Defines the available placements that can be used when a flip occurs.
         */
        "flipPlacements"?: Placement[];
        /**
          * Offset the position of the popover away from the reference element.
         */
        "offsetDistance": number;
        /**
          * Offset the position of the popover along the reference element.
         */
        "offsetSkidding": number;
        /**
          * Display and position the component.
         */
        "open": boolean;
        /**
          * Determines where the component will be positioned relative to the referenceElement.
         */
        "placement": CalcitePlacement;
        /**
          * Reference HTMLElement used to position this component according to the placement property.
         */
        "referenceElement": HTMLElement | string;
        "reposition": () => Promise<void>;
        "setFocus": (focusId?: "close-button") => Promise<void>;
        /**
          * Text for close button.
         */
        "textClose": string;
        /**
          * Select theme (light or dark)
         */
        "theme": "light" | "dark";
        "toggle": () => Promise<void>;
    }
    interface CalcitePopoverManager {
        /**
          * CSS Selector to match reference elements for popovers.
         */
        "selector": string;
    }
    interface CalciteProgress {
        /**
          * Fill bar in the opposite direction
         */
        "reversed": boolean;
        /**
          * Text label for the progress indicator
         */
        "text": string;
        /**
          * Select theme (light or dark)
         */
        "theme": "light" | "dark";
        /**
          * Use indeterminate if finding actual progress value is impossible
         */
        "type": "indeterminate" | "determinate";
        /**
          * Percent complete of 100
         */
        "value": number;
    }
    interface CalciteRadioGroup {
        /**
          * specify the appearance style of the radio group, defaults to solid.
         */
        "appearance": "solid" | "outline";
        /**
          * specify the layout of the radio group, defaults to horizontal
         */
        "layout": "horizontal" | "vertical";
        /**
          * The group's name. Gets submitted with the form.
         */
        "name": string;
        /**
          * The scale of the radio group
         */
        "scale": "s" | "m" | "l";
        /**
          * The group's selected item.
         */
        "selectedItem": HTMLCalciteRadioGroupItemElement;
        /**
          * Focuses the selected item. If there is no selection, it focuses the first item.
         */
        "setFocus": () => Promise<void>;
        /**
          * The component's theme.
         */
        "theme": "light" | "dark";
    }
    interface CalciteRadioGroupItem {
        /**
          * Indicates whether the control is checked.
         */
        "checked": boolean;
        /**
          * The control's value.
         */
        "value": any | null;
    }
    interface CalciteSlider {
        /**
          * Disable and gray out the slider
         */
        "disabled": boolean;
        /**
          * Label handles with their numeric value
         */
        "labelHandles"?: boolean;
        /**
          * Label tick marks with their numeric value.
         */
        "labelTicks"?: boolean;
        /**
          * Maximum selectable value
         */
        "max": number;
        /**
          * Label for second handle if needed (ex. "Temperature, upper bound")
         */
        "maxLabel"?: string;
        /**
          * Currently selected upper number (if multi-select)
         */
        "maxValue"?: number;
        /**
          * Minimum selectable value
         */
        "min": number;
        /**
          * Label for first (or only) handle (ex. "Temperature, lower bound")
         */
        "minLabel": string;
        /**
          * Currently selected lower number (if multi-select)
         */
        "minValue"?: number;
        /**
          * Interval to move on page up/page down keys
         */
        "pageStep"?: number;
        /**
          * Use finer point for handles
         */
        "precise"?: boolean;
        "setFocus": () => Promise<void>;
        /**
          * Snap selection along the step interval
         */
        "snap"?: boolean;
        /**
          * Interval to move on up/down keys
         */
        "step"?: number;
        /**
          * Select theme (light or dark)
         */
        "theme": "light" | "dark";
        /**
          * Show tick marks on the number line at provided interval
         */
        "ticks"?: number;
        /**
          * Currently selected number (if single select)
         */
        "value": null | number;
    }
    interface CalciteSplitButton {
        /**
          * specify the color of the control, defaults to blue
         */
        "color": "blue" | "dark" | "light" | "red";
        /**
          * is the control disabled
         */
        "disabled"?: boolean;
        /**
          * specify the icon used for the dropdown menu, defaults to chevron
         */
        "dropdownIconType": "chevron" | "caret";
        /**
          * aria label for overflow button
         */
        "dropdownLabel"?: string;
        /**
          * optionally add a calcite-loader component to the control, disabling interaction. with the primary button
         */
        "loading"?: boolean;
        /**
          * optionally pass an icon to display on the primary button - accepts Calcite UI icon names
         */
        "primaryIcon"?: string;
        /**
          * optionally pass an aria-label for the primary button
         */
        "primaryLabel"?: string;
        /**
          * text for primary action button
         */
        "primaryText": string;
        /**
          * specify the scale of the control, defaults to m
         */
        "scale": "s" | "m" | "l";
        /**
          * select theme (light or dark), defaults to light
         */
        "theme": "light" | "dark";
    }
    interface CalciteStepper {
        /**
          * set the last step as active
         */
        "endStep": () => Promise<void>;
        /**
          * set the requested step as active
         */
        "goToStep": (num: number) => Promise<void>;
        /**
          * optionally display a status icon next to the step title
         */
        "icon": boolean;
        /**
          * specify the layout of stepper, defaults to horizontal
         */
        "layout": "horizontal" | "vertical";
        /**
          * set the next step as active
         */
        "nextStep": () => Promise<void>;
        /**
          * optionally display the number next to the step title
         */
        "numbered": boolean;
        /**
          * set the previous step as active
         */
        "prevStep": () => Promise<void>;
        "requestedContent": HTMLElement[] | HTMLElement;
        /**
          * specify the scale of stepper, defaults to m
         */
        "scale": "s" | "m" | "l";
        /**
          * set the first step as active
         */
        "startStep": () => Promise<void>;
        /**
          * specify the theme of stepper, defaults to light
         */
        "theme": "light" | "dark";
    }
    interface CalciteStepperItem {
        /**
          * is the step active
         */
        "active": boolean;
        /**
          * has the step been completed
         */
        "complete": boolean;
        /**
          * is the step disabled and not navigable to by a user
         */
        "disabled": boolean;
        /**
          * does the step contain an error that needs to be resolved by the user
         */
        "error": boolean;
        "icon": boolean;
        /**
          * pass a title for the stepper item
         */
        "itemSubtitle"?: string;
        /**
          * pass a title for the stepper item
         */
        "itemTitle"?: string;
        "layout"?: string;
        "numbered": boolean;
        "scale": "s" | "m" | "l";
    }
    interface CalciteSwitch {
        /**
          * What color the switch should be
         */
        "color": "red" | "blue";
        /**
          * The name of the checkbox input
         */
        "name"?: string;
        /**
          * The scale of the switch
         */
        "scale": "s" | "m" | "l";
        /**
          * True if the switch is initially on
         */
        "switched"?: boolean;
        /**
          * The component's theme.
         */
        "theme": "light" | "dark";
        /**
          * The value of the checkbox input
         */
        "value"?: string;
    }
    interface CalciteTab {
        /**
          * Return the index of this tab within the tab array
         */
        "getTabIndex": () => Promise<number>;
        /**
          * Show this tab
         */
        "isActive": boolean;
        /**
          * Optionally include a unique name for this tab, be sure to also set this name on the associated title.
         */
        "tab": string;
        "updateAriaInfo": (tabIds?: string[], titleIds?: string[]) => Promise<void>;
    }
    interface CalciteTabNav {
        "layout": "center" | "inline";
        /**
          * Name to use when saving selected tab data to localStorage
         */
        "storageId": string;
        /**
          * Pass the same string to multiple tab navs to keep them all in sync if one changes
         */
        "syncId": string;
    }
    interface CalciteTabTitle {
        "getTabIdentifier": () => Promise<string | number>;
        /**
          * Return the index of this title within the nav
         */
        "getTabIndex": () => Promise<number>;
        /**
          * Show this tab title as selected
         */
        "isActive": boolean;
        "layout": "center" | "inline";
        /**
          * Optionally include a unique name for the tab title, be sure to also set this name on the associated tab.
         */
        "tab"?: string;
        "updateAriaInfo": (tabIds?: string[], titleIds?: string[]) => Promise<void>;
    }
    interface CalciteTabs {
        /**
          * Align tab titles to the edge or fully justify them across the tab nav ("center")
         */
        "layout": "center" | "inline";
        /**
          * Select theme (light or dark)
         */
        "theme": "light" | "dark";
    }
    interface CalciteTooltip {
        /**
          * Offset the position of the popover away from the reference element.
         */
        "offsetDistance": number;
        /**
          * Offset the position of the popover along the reference element.
         */
        "offsetSkidding": number;
        /**
          * Display and position the component.
         */
        "open": boolean;
        /**
          * Determines where the component will be positioned relative to the referenceElement.
         */
        "placement": CalcitePlacement;
        /**
          * Reference HTMLElement used to position this component.
         */
        "referenceElement": HTMLElement | string;
        "reposition": () => Promise<void>;
        /**
          * Select theme (light or dark)
         */
        "theme": "light" | "dark";
    }
    interface CalciteTooltipManager {
        /**
          * CSS Selector to match reference elements for tooltips.
         */
        "selector": string;
    }
    interface CalciteTree {
        /**
          * Display indentation guide lines
         */
        "lines": boolean;
        "root": boolean;
        /**
          * Specify the scale of the tree, defaults to m
         */
        "scale": "s" | "m";
        /**
          * Customize how tree selection works (single, multi, children, multi-children)
         */
        "selectionMode": TreeSelectionMode;
        /**
          * Select theme (light or dark)
         */
        "theme": "light" | "dark";
    }
    interface CalciteTreeItem {
        "depth": number;
        /**
          * True if the item is in an expanded state
         */
        "expanded": boolean;
        "hasChildren": boolean;
        "lines": boolean;
        "parentExpanded": boolean;
        "scale": "s" | "m";
        /**
          * Is the item currently selected
         */
        "selected": boolean;
    }
}
declare global {
    interface HTMLCalciteAccordionElement extends Components.CalciteAccordion, HTMLStencilElement {
    }
    var HTMLCalciteAccordionElement: {
        prototype: HTMLCalciteAccordionElement;
        new (): HTMLCalciteAccordionElement;
    };
    interface HTMLCalciteAccordionItemElement extends Components.CalciteAccordionItem, HTMLStencilElement {
    }
    var HTMLCalciteAccordionItemElement: {
        prototype: HTMLCalciteAccordionItemElement;
        new (): HTMLCalciteAccordionItemElement;
    };
    interface HTMLCalciteAlertElement extends Components.CalciteAlert, HTMLStencilElement {
    }
    var HTMLCalciteAlertElement: {
        prototype: HTMLCalciteAlertElement;
        new (): HTMLCalciteAlertElement;
    };
    interface HTMLCalciteButtonElement extends Components.CalciteButton, HTMLStencilElement {
    }
    var HTMLCalciteButtonElement: {
        prototype: HTMLCalciteButtonElement;
        new (): HTMLCalciteButtonElement;
    };
    interface HTMLCalciteCardElement extends Components.CalciteCard, HTMLStencilElement {
    }
    var HTMLCalciteCardElement: {
        prototype: HTMLCalciteCardElement;
        new (): HTMLCalciteCardElement;
    };
    interface HTMLCalciteCheckboxElement extends Components.CalciteCheckbox, HTMLStencilElement {
    }
    var HTMLCalciteCheckboxElement: {
        prototype: HTMLCalciteCheckboxElement;
        new (): HTMLCalciteCheckboxElement;
    };
    interface HTMLCalciteChipElement extends Components.CalciteChip, HTMLStencilElement {
    }
    var HTMLCalciteChipElement: {
        prototype: HTMLCalciteChipElement;
        new (): HTMLCalciteChipElement;
    };
    interface HTMLCalciteComboboxElement extends Components.CalciteCombobox, HTMLStencilElement {
    }
    var HTMLCalciteComboboxElement: {
        prototype: HTMLCalciteComboboxElement;
        new (): HTMLCalciteComboboxElement;
    };
    interface HTMLCalciteComboboxItemElement extends Components.CalciteComboboxItem, HTMLStencilElement {
    }
    var HTMLCalciteComboboxItemElement: {
        prototype: HTMLCalciteComboboxItemElement;
        new (): HTMLCalciteComboboxItemElement;
    };
    interface HTMLCalciteDateElement extends Components.CalciteDate, HTMLStencilElement {
    }
    var HTMLCalciteDateElement: {
        prototype: HTMLCalciteDateElement;
        new (): HTMLCalciteDateElement;
    };
    interface HTMLCalciteDateDayElement extends Components.CalciteDateDay, HTMLStencilElement {
    }
    var HTMLCalciteDateDayElement: {
        prototype: HTMLCalciteDateDayElement;
        new (): HTMLCalciteDateDayElement;
    };
    interface HTMLCalciteDateMonthElement extends Components.CalciteDateMonth, HTMLStencilElement {
    }
    var HTMLCalciteDateMonthElement: {
        prototype: HTMLCalciteDateMonthElement;
        new (): HTMLCalciteDateMonthElement;
    };
    interface HTMLCalciteDateMonthHeaderElement extends Components.CalciteDateMonthHeader, HTMLStencilElement {
    }
    var HTMLCalciteDateMonthHeaderElement: {
        prototype: HTMLCalciteDateMonthHeaderElement;
        new (): HTMLCalciteDateMonthHeaderElement;
    };
    interface HTMLCalciteDropdownElement extends Components.CalciteDropdown, HTMLStencilElement {
    }
    var HTMLCalciteDropdownElement: {
        prototype: HTMLCalciteDropdownElement;
        new (): HTMLCalciteDropdownElement;
    };
    interface HTMLCalciteDropdownGroupElement extends Components.CalciteDropdownGroup, HTMLStencilElement {
    }
    var HTMLCalciteDropdownGroupElement: {
        prototype: HTMLCalciteDropdownGroupElement;
        new (): HTMLCalciteDropdownGroupElement;
    };
    interface HTMLCalciteDropdownItemElement extends Components.CalciteDropdownItem, HTMLStencilElement {
    }
    var HTMLCalciteDropdownItemElement: {
        prototype: HTMLCalciteDropdownItemElement;
        new (): HTMLCalciteDropdownItemElement;
    };
    interface HTMLCalciteExampleElement extends Components.CalciteExample, HTMLStencilElement {
    }
    var HTMLCalciteExampleElement: {
        prototype: HTMLCalciteExampleElement;
        new (): HTMLCalciteExampleElement;
    };
    interface HTMLCalciteIconElement extends Components.CalciteIcon, HTMLStencilElement {
    }
    var HTMLCalciteIconElement: {
        prototype: HTMLCalciteIconElement;
        new (): HTMLCalciteIconElement;
    };
    interface HTMLCalciteInputElement extends Components.CalciteInput, HTMLStencilElement {
    }
    var HTMLCalciteInputElement: {
        prototype: HTMLCalciteInputElement;
        new (): HTMLCalciteInputElement;
    };
    interface HTMLCalciteInputMessageElement extends Components.CalciteInputMessage, HTMLStencilElement {
    }
    var HTMLCalciteInputMessageElement: {
        prototype: HTMLCalciteInputMessageElement;
        new (): HTMLCalciteInputMessageElement;
    };
    interface HTMLCalciteLabelElement extends Components.CalciteLabel, HTMLStencilElement {
    }
    var HTMLCalciteLabelElement: {
        prototype: HTMLCalciteLabelElement;
        new (): HTMLCalciteLabelElement;
    };
    interface HTMLCalciteLinkElement extends Components.CalciteLink, HTMLStencilElement {
    }
    var HTMLCalciteLinkElement: {
        prototype: HTMLCalciteLinkElement;
        new (): HTMLCalciteLinkElement;
    };
    interface HTMLCalciteLoaderElement extends Components.CalciteLoader, HTMLStencilElement {
    }
    var HTMLCalciteLoaderElement: {
        prototype: HTMLCalciteLoaderElement;
        new (): HTMLCalciteLoaderElement;
    };
    interface HTMLCalciteModalElement extends Components.CalciteModal, HTMLStencilElement {
    }
    var HTMLCalciteModalElement: {
        prototype: HTMLCalciteModalElement;
        new (): HTMLCalciteModalElement;
    };
    interface HTMLCalciteNoticeElement extends Components.CalciteNotice, HTMLStencilElement {
    }
    var HTMLCalciteNoticeElement: {
        prototype: HTMLCalciteNoticeElement;
        new (): HTMLCalciteNoticeElement;
    };
    interface HTMLCalcitePaginationElement extends Components.CalcitePagination, HTMLStencilElement {
    }
    var HTMLCalcitePaginationElement: {
        prototype: HTMLCalcitePaginationElement;
        new (): HTMLCalcitePaginationElement;
    };
    interface HTMLCalcitePopoverElement extends Components.CalcitePopover, HTMLStencilElement {
    }
    var HTMLCalcitePopoverElement: {
        prototype: HTMLCalcitePopoverElement;
        new (): HTMLCalcitePopoverElement;
    };
    interface HTMLCalcitePopoverManagerElement extends Components.CalcitePopoverManager, HTMLStencilElement {
    }
    var HTMLCalcitePopoverManagerElement: {
        prototype: HTMLCalcitePopoverManagerElement;
        new (): HTMLCalcitePopoverManagerElement;
    };
    interface HTMLCalciteProgressElement extends Components.CalciteProgress, HTMLStencilElement {
    }
    var HTMLCalciteProgressElement: {
        prototype: HTMLCalciteProgressElement;
        new (): HTMLCalciteProgressElement;
    };
    interface HTMLCalciteRadioGroupElement extends Components.CalciteRadioGroup, HTMLStencilElement {
    }
    var HTMLCalciteRadioGroupElement: {
        prototype: HTMLCalciteRadioGroupElement;
        new (): HTMLCalciteRadioGroupElement;
    };
    interface HTMLCalciteRadioGroupItemElement extends Components.CalciteRadioGroupItem, HTMLStencilElement {
    }
    var HTMLCalciteRadioGroupItemElement: {
        prototype: HTMLCalciteRadioGroupItemElement;
        new (): HTMLCalciteRadioGroupItemElement;
    };
    interface HTMLCalciteSliderElement extends Components.CalciteSlider, HTMLStencilElement {
    }
    var HTMLCalciteSliderElement: {
        prototype: HTMLCalciteSliderElement;
        new (): HTMLCalciteSliderElement;
    };
    interface HTMLCalciteSplitButtonElement extends Components.CalciteSplitButton, HTMLStencilElement {
    }
    var HTMLCalciteSplitButtonElement: {
        prototype: HTMLCalciteSplitButtonElement;
        new (): HTMLCalciteSplitButtonElement;
    };
    interface HTMLCalciteStepperElement extends Components.CalciteStepper, HTMLStencilElement {
    }
    var HTMLCalciteStepperElement: {
        prototype: HTMLCalciteStepperElement;
        new (): HTMLCalciteStepperElement;
    };
    interface HTMLCalciteStepperItemElement extends Components.CalciteStepperItem, HTMLStencilElement {
    }
    var HTMLCalciteStepperItemElement: {
        prototype: HTMLCalciteStepperItemElement;
        new (): HTMLCalciteStepperItemElement;
    };
    interface HTMLCalciteSwitchElement extends Components.CalciteSwitch, HTMLStencilElement {
    }
    var HTMLCalciteSwitchElement: {
        prototype: HTMLCalciteSwitchElement;
        new (): HTMLCalciteSwitchElement;
    };
    interface HTMLCalciteTabElement extends Components.CalciteTab, HTMLStencilElement {
    }
    var HTMLCalciteTabElement: {
        prototype: HTMLCalciteTabElement;
        new (): HTMLCalciteTabElement;
    };
    interface HTMLCalciteTabNavElement extends Components.CalciteTabNav, HTMLStencilElement {
    }
    var HTMLCalciteTabNavElement: {
        prototype: HTMLCalciteTabNavElement;
        new (): HTMLCalciteTabNavElement;
    };
    interface HTMLCalciteTabTitleElement extends Components.CalciteTabTitle, HTMLStencilElement {
    }
    var HTMLCalciteTabTitleElement: {
        prototype: HTMLCalciteTabTitleElement;
        new (): HTMLCalciteTabTitleElement;
    };
    interface HTMLCalciteTabsElement extends Components.CalciteTabs, HTMLStencilElement {
    }
    var HTMLCalciteTabsElement: {
        prototype: HTMLCalciteTabsElement;
        new (): HTMLCalciteTabsElement;
    };
    interface HTMLCalciteTooltipElement extends Components.CalciteTooltip, HTMLStencilElement {
    }
    var HTMLCalciteTooltipElement: {
        prototype: HTMLCalciteTooltipElement;
        new (): HTMLCalciteTooltipElement;
    };
    interface HTMLCalciteTooltipManagerElement extends Components.CalciteTooltipManager, HTMLStencilElement {
    }
    var HTMLCalciteTooltipManagerElement: {
        prototype: HTMLCalciteTooltipManagerElement;
        new (): HTMLCalciteTooltipManagerElement;
    };
    interface HTMLCalciteTreeElement extends Components.CalciteTree, HTMLStencilElement {
    }
    var HTMLCalciteTreeElement: {
        prototype: HTMLCalciteTreeElement;
        new (): HTMLCalciteTreeElement;
    };
    interface HTMLCalciteTreeItemElement extends Components.CalciteTreeItem, HTMLStencilElement {
    }
    var HTMLCalciteTreeItemElement: {
        prototype: HTMLCalciteTreeItemElement;
        new (): HTMLCalciteTreeItemElement;
    };
    interface HTMLElementTagNameMap {
        "calcite-accordion": HTMLCalciteAccordionElement;
        "calcite-accordion-item": HTMLCalciteAccordionItemElement;
        "calcite-alert": HTMLCalciteAlertElement;
        "calcite-button": HTMLCalciteButtonElement;
        "calcite-card": HTMLCalciteCardElement;
        "calcite-checkbox": HTMLCalciteCheckboxElement;
        "calcite-chip": HTMLCalciteChipElement;
        "calcite-combobox": HTMLCalciteComboboxElement;
        "calcite-combobox-item": HTMLCalciteComboboxItemElement;
        "calcite-date": HTMLCalciteDateElement;
        "calcite-date-day": HTMLCalciteDateDayElement;
        "calcite-date-month": HTMLCalciteDateMonthElement;
        "calcite-date-month-header": HTMLCalciteDateMonthHeaderElement;
        "calcite-dropdown": HTMLCalciteDropdownElement;
        "calcite-dropdown-group": HTMLCalciteDropdownGroupElement;
        "calcite-dropdown-item": HTMLCalciteDropdownItemElement;
        "calcite-example": HTMLCalciteExampleElement;
        "calcite-icon": HTMLCalciteIconElement;
        "calcite-input": HTMLCalciteInputElement;
        "calcite-input-message": HTMLCalciteInputMessageElement;
        "calcite-label": HTMLCalciteLabelElement;
        "calcite-link": HTMLCalciteLinkElement;
        "calcite-loader": HTMLCalciteLoaderElement;
        "calcite-modal": HTMLCalciteModalElement;
        "calcite-notice": HTMLCalciteNoticeElement;
        "calcite-pagination": HTMLCalcitePaginationElement;
        "calcite-popover": HTMLCalcitePopoverElement;
        "calcite-popover-manager": HTMLCalcitePopoverManagerElement;
        "calcite-progress": HTMLCalciteProgressElement;
        "calcite-radio-group": HTMLCalciteRadioGroupElement;
        "calcite-radio-group-item": HTMLCalciteRadioGroupItemElement;
        "calcite-slider": HTMLCalciteSliderElement;
        "calcite-split-button": HTMLCalciteSplitButtonElement;
        "calcite-stepper": HTMLCalciteStepperElement;
        "calcite-stepper-item": HTMLCalciteStepperItemElement;
        "calcite-switch": HTMLCalciteSwitchElement;
        "calcite-tab": HTMLCalciteTabElement;
        "calcite-tab-nav": HTMLCalciteTabNavElement;
        "calcite-tab-title": HTMLCalciteTabTitleElement;
        "calcite-tabs": HTMLCalciteTabsElement;
        "calcite-tooltip": HTMLCalciteTooltipElement;
        "calcite-tooltip-manager": HTMLCalciteTooltipManagerElement;
        "calcite-tree": HTMLCalciteTreeElement;
        "calcite-tree-item": HTMLCalciteTreeItemElement;
    }
}
declare namespace LocalJSX {
    interface CalciteAccordion {
        /**
          * specify the appearance - default (containing border), or minimal (no containing border), defaults to default
         */
        "appearance"?: "default" | "minimal" | "transparent";
        /**
          * specify the placement of the icon in the header, defaults to end
         */
        "iconPosition"?: "start" | "end";
        /**
          * specify the type of the icon in the header, defaults to chevron
         */
        "iconType"?: "chevron" | "caret" | "plus-minus";
        "onCalciteAccordionItemHasChanged"?: (event: CustomEvent<any>) => void;
        /**
          * specify the scale of accordion, defaults to m
         */
        "scale"?: "s" | "m" | "l";
        /**
          * specify the selection mode - multi (allow any number of open items), single (allow one open item), or single-persist (allow and require one open item), defaults to multi
         */
        "selectionMode"?: "multi" | "single" | "single-persist";
        /**
          * specify the theme of accordion, defaults to light
         */
        "theme"?: "light" | "dark";
    }
    interface CalciteAccordionItem {
        "active"?: boolean;
        /**
          * optionally pass an icon to display - accepts Calcite UI icon names
         */
        "icon"?: string;
        /**
          * pass a title for the accordion item
         */
        "itemSubtitle"?: string;
        /**
          * pass a title for the accordion item
         */
        "itemTitle"?: string;
        "onCalciteAccordionItemKeyEvent"?: (event: CustomEvent<any>) => void;
        "onCalciteAccordionItemSelected"?: (event: CustomEvent<any>) => void;
        "onCloseCalciteAccordionItem"?: (event: CustomEvent<any>) => void;
        "onRegisterCalciteAccordionItem"?: (event: CustomEvent<any>) => void;
    }
    interface CalciteAlert {
        /**
          * Is the alert currently active or not
         */
        "active"?: boolean;
        /**
          * a managed list of alerts
         */
        "alertQueue"?: string[];
        /**
          * a managed list of alerts
         */
        "alertQueueLength"?: number;
        /**
          * Close the alert automatically (recommended for passive, non-blocking alerts)
         */
        "autoDismiss"?: boolean;
        /**
          * Duration of autoDismiss (only used with `autoDismiss`)
         */
        "autoDismissDuration"?: "fast" | "medium" | "slow";
        /**
          * Color for the alert (will apply to top border and icon)
         */
        "color"?: "blue" | "green" | "red" | "yellow";
        /**
          * the determined current alert
         */
        "currentAlert"?: string;
        /**
          * specify if the alert should display an icon
         */
        "icon"?: boolean;
        /**
          * Fired when an alert is closed
         */
        "onCalciteAlertClose"?: (event: CustomEvent<any>) => void;
        /**
          * Fired when an alert is opened
         */
        "onCalciteAlertOpen"?: (event: CustomEvent<any>) => void;
        /**
          * Fired when an alert is opened
         */
        "onCalciteAlertSync"?: (event: CustomEvent<any>) => void;
        /**
          * specify the scale of the button, defaults to m
         */
        "scale"?: "s" | "m" | "l";
        /**
          * Select theme (light or dark)
         */
        "theme"?: "light" | "dark";
    }
    interface CalciteButton {
        /**
          * specify the appearance style of the button, defaults to solid.
         */
        "appearance"?: "solid" | "outline" | "clear" | "transparent";
        /**
          * specify the color of the button, defaults to blue
         */
        "color"?: "blue" | "dark" | "light" | "red";
        /**
          * is the button disabled
         */
        "disabled"?: boolean;
        /**
          * optionally add a floating style to the button - this should be positioned fixed or sticky
         */
        "floating"?: boolean;
        /**
          * optionally pass a href - used to determine if the component should render as a button or an anchor
         */
        "href"?: string;
        /**
          * optionally pass an icon to display - accepts Calcite UI icon names
         */
        "icon"?: string;
        /**
          * optionally used with icon, select where to position the icon
         */
        "iconPosition"?: "start" | "end";
        /**
          * optionally add a calcite-loader component to the button, disabling interaction.
         */
        "loading"?: boolean;
        /**
          * optionally add a round style to the button
         */
        "round"?: boolean;
        /**
          * specify the scale of the button, defaults to m
         */
        "scale"?: "xs" | "s" | "m" | "l" | "xl";
        /**
          * Select theme (light or dark)
         */
        "theme"?: "light" | "dark";
        /**
          * specify the width of the button, defaults to auto
         */
        "width"?: "auto" | "half" | "full";
    }
    interface CalciteCard {
        /**
          * When true, the cards content is waiting to be loaded. This state shows a busy indicator.
         */
        "loading"?: boolean;
        /**
          * Fired when a selectable card is selected
         */
        "onCalciteCardSelected"?: (event: CustomEvent<any>) => void;
        /**
          * Indicates whether the card is selectable.
         */
        "selectable"?: boolean;
        /**
          * Indicates whether the card is selected.
         */
        "selected"?: boolean;
        /**
          * The theme of the card.
         */
        "theme"?: "light" | "dark";
    }
    interface CalciteCheckbox {
        /**
          * True if the checkbox is initially checked
         */
        "checked"?: boolean;
        /**
          * True if the checkbox is disabled
         */
        "disabled"?: boolean;
        /**
          * True if the checkbox is initially indeterminate, which is independent from its checked state https://css-tricks.com/indeterminate-checkboxes/
         */
        "indeterminate"?: boolean;
        /**
          * The name of the checkbox input
         */
        "name"?: string;
        /**
          * Emitted when the checkbox checked status changes
         */
        "onCalciteCheckboxChange"?: (event: CustomEvent<any>) => void;
        /**
          * Size of the checkbox
         */
        "size"?: "small" | "large";
        /**
          * Determines what theme to use
         */
        "theme"?: "light" | "dark";
        /**
          * The value of the checkbox input
         */
        "value"?: string;
    }
    interface CalciteChip {
        /**
          * optionally pass an icon to display - accepts Calcite UI icon names
         */
        "icon"?: string;
        "onCalciteChipDismiss"?: (event: CustomEvent<any>) => void;
        /**
          * specify the scale of the chip, defaults to m
         */
        "scale"?: "xs" | "s" | "m" | "l" | "xl";
        /**
          * Select theme (light or dark)
         */
        "theme"?: "light" | "dark";
        "value": string;
    }
    interface CalciteCombobox {
        "active"?: boolean;
        "disabled"?: boolean;
        "label": string;
        "onCalciteComboboxChipDismiss"?: (event: CustomEvent<any>) => void;
        "onCalciteLookupChange"?: (event: CustomEvent<any>) => void;
        "placeholder"?: string;
        /**
          * specify the scale of the combobox, defaults to m
         */
        "scale"?: "xs" | "s" | "m" | "l" | "xl";
        /**
          * Select theme (light or dark)
         */
        "theme"?: "light" | "dark";
    }
    interface CalciteComboboxItem {
        "disabled"?: boolean;
        /**
          * Emitted whenever the item is selected or unselected.
          * @event calciteComboboxItemChange
         */
        "onCalciteComboboxItemChange"?: (event: CustomEvent<any>) => void;
        "onCalciteComboboxItemKeyEvent"?: (event: CustomEvent<any>) => void;
        "parentItem"?: HTMLCalciteComboboxItemElement;
        "selected"?: boolean;
        "textLabel": string;
        "value": string;
    }
    interface CalciteDate {
        /**
          * Expand or collapse when calendar does not have input
         */
        "active"?: boolean;
        /**
          * BCP 47 language tag for desired language and country format
         */
        "locale"?: string;
        /**
          * Latest allowed date ("yyyy-mm-dd")
         */
        "max"?: string;
        /**
          * Earliest allowed date ("yyyy-mm-dd")
         */
        "min"?: string;
        /**
          * Localized string for "next month"
         */
        "nextMonthLabel"?: string;
        /**
          * Show only calendar popup
         */
        "noCalendarInput"?: boolean;
        /**
          * Trigger calcite date change when a user changes the date.
         */
        "onCalciteDateChange"?: (event: CustomEvent<Date>) => void;
        /**
          * Localized string for "previous month"
         */
        "prevMonthLabel"?: string;
        /**
          * specify the scale of the date picker
         */
        "scale"?: "s" | "m" | "l";
        /**
          * Selected date
         */
        "value"?: string;
        /**
          * Selected date as full date object
         */
        "valueAsDate"?: Date;
    }
    interface CalciteDateDay {
        /**
          * Date is actively in focus for keyboard navigation
         */
        "active"?: boolean;
        /**
          * Date is in the current month.
         */
        "currentMonth"?: boolean;
        /**
          * Day of the month to be shown.
         */
        "day"?: number;
        /**
          * Date is outside of range and can't be selected
         */
        "disabled"?: boolean;
        /**
          * Locale to display the day in
         */
        "locale"?: string;
        /**
          * Emitted when user selects day
         */
        "onCalciteDaySelect"?: (event: CustomEvent<any>) => void;
        /**
          * specify the scale of the date picker
         */
        "scale"?: "s" | "m" | "l";
        /**
          * Date is the current selected date of the picker
         */
        "selected"?: boolean;
    }
    interface CalciteDateMonth {
        /**
          * Date currently active.
         */
        "activeDate"?: Date;
        /**
          * User's language and region as BCP 47 formatted string.
         */
        "locale"?: string;
        /**
          * Maximum date of the calendar above which is disabled.
         */
        "max"?: Date;
        /**
          * Minimum date of the calendar below which is disabled.
         */
        "min"?: Date;
        /**
          * Active date for the user keyboard access.
         */
        "onCalciteActiveDateChange"?: (event: CustomEvent<any>) => void;
        /**
          * Event emitted when user selects the date.
         */
        "onCalciteDateSelect"?: (event: CustomEvent<any>) => void;
        /**
          * specify the scale of the date picker
         */
        "scale"?: "s" | "m" | "l";
        /**
          * Already selected date.
         */
        "selectedDate"?: Date;
    }
    interface CalciteDateMonthHeader {
        /**
          * Focused date with indicator (will become selected date if user proceeds)
         */
        "activeDate"?: Date;
        /**
          * User's language and region as BCP 47 formatted string.
         */
        "locale"?: string;
        /**
          * Maximum date of the calendar above which is disabled.
         */
        "max"?: Date;
        /**
          * Minimum date of the calendar below which is disabled.
         */
        "min"?: Date;
        /**
          * Localized string for next month.
         */
        "nextMonthLabel"?: string;
        /**
          * Changes to active date
         */
        "onCalciteActiveDateChange"?: (event: CustomEvent<Date>) => void;
        /**
          * Localized string for previous month.
         */
        "prevMonthLabel"?: string;
        /**
          * specify the scale of the date picker
         */
        "scale"?: "s" | "m" | "l";
        /**
          * Already selected date.
         */
        "selectedDate"?: Date;
    }
    interface CalciteDropdown {
        "active"?: boolean;
        /**
          * specify the alignment of dropdown, defaults to start
         */
        "alignment"?: "start" | "center" | "end";
        /**
          * specify the max items to display before showing the scroller, must be greater than 0 *
         */
        "maxItems"?: number;
        /**
          * specify the scale of dropdown, defaults to m
         */
        "scale"?: "s" | "m" | "l";
        /**
          * specify the theme of the dropdown, defaults to light
         */
        "theme"?: "light" | "dark";
        /**
          * specify whether the dropdown is opened by hover or click of the trigger element
         */
        "type"?: "hover" | "click";
        /**
          * specify the width of dropdown, defaults to m
         */
        "width"?: "s" | "m" | "l";
    }
    interface CalciteDropdownGroup {
        /**
          * optionally set a group title for display
         */
        "groupTitle"?: string;
        "onCalciteDropdownItemHasChanged"?: (event: CustomEvent<any>) => void;
        "onRegisterCalciteDropdownGroup"?: (event: CustomEvent<GroupRegistration>) => void;
        /**
          * specify the selection mode - multi (allow any number of (or no) active items), single (allow and require one active item), none (no active items), defaults to single
         */
        "selectionMode"?: "multi" | "single" | "none";
    }
    interface CalciteDropdownItem {
        "active"?: boolean;
        /**
          * optionally pass a href - used to determine if the component should render as anchor
         */
        "href"?: string;
        /**
          * optionally pass an icon to display at the end of an item - accepts calcite ui icon names
         */
        "iconEnd"?: string;
        /**
          * optionally pass an icon to display at the start of an item - accepts calcite ui icon names
         */
        "iconStart"?: string;
        "onCalciteDropdownItemKeyEvent"?: (event: CustomEvent<any>) => void;
        "onCalciteDropdownItemSelected"?: (event: CustomEvent<any>) => void;
        "onCloseCalciteDropdown"?: (event: CustomEvent<any>) => void;
        "onRegisterCalciteDropdownItem"?: (event: CustomEvent<ItemRegistration>) => void;
    }
    interface CalciteExample {
        "onOpen"?: (event: CustomEvent<any>) => void;
        /**
          * Be sure to add a jsdoc comment describing your property for the generated readme file. If your property should be hidden from documentation, you can use the `@internal` tag
         */
        "property"?: string;
    }
    interface CalciteIcon {
        /**
          * The name of the icon to display. The value of this property must match the icon name from https://esri.github.io/calcite-ui-icons/.
         */
        "icon"?: string;
        /**
          * When true, the icon will be mirrored when the element direction is 'rtl'.
         */
        "mirrored"?: boolean;
        /**
          * Icon scale. Can be "s" | "m" | "l".
         */
        "scale"?: Scale;
        /**
          * The icon label.  It is recommended to set this value if your icon is semantic.
         */
        "textLabel"?: string;
        /**
          * Icon theme. Can be "light" or "dark".
         */
        "theme"?: Theme;
    }
    interface CalciteInput {
        /**
          * specify the alignment of the value of the input
         */
        "alignment"?: "start" | "end";
        /**
          * should the input autofocus
         */
        "autofocus"?: boolean;
        /**
          * for recognized input types, show an icon if applicable
         */
        "icon"?: string | boolean;
        /**
          * specify if the input is in loading state
         */
        "loading"?: boolean;
        /**
          * input max
         */
        "max"?: string;
        /**
          * input min
         */
        "min"?: string;
        /**
          * specify the placement of the number buttons
         */
        "numberButtonType"?: "vertical" | "horizontal" | "none";
        "onCalciteInputBlur"?: (event: CustomEvent<any>) => void;
        "onCalciteInputChange"?: (event: CustomEvent<any>) => void;
        "onCalciteInputFocus"?: (event: CustomEvent<any>) => void;
        /**
          * explicitly whitelist placeholder attribute
         */
        "placeholder"?: string;
        /**
          * optionally add prefix  *
         */
        "prefixText"?: string;
        /**
          * is the input required
         */
        "required"?: boolean;
        /**
          * specify the scale of the input, defaults to m
         */
        "scale"?: "s" | "m" | "l";
        /**
          * specify the status of the input field, determines message and icons
         */
        "status"?: "invalid" | "valid" | "idle";
        /**
          * input step
         */
        "step"?: string;
        /**
          * optionally add suffix  *
         */
        "suffixText"?: string;
        /**
          * specify the alignment of dropdown, defaults to left
         */
        "theme"?: "light" | "dark";
        /**
          * specify the input type
         */
        "type"?: "color" | "date" | "datetime-local" | "email" | "file" | "image" | "month" | "number" | "password" | "search" | "tel" | "text" | "textarea" | "time" | "url" | "week";
        /**
          * input value
         */
        "value"?: string;
    }
    interface CalciteInputMessage {
        "active"?: boolean;
        /**
          * specify the appearance type - minimal or default
         */
        "appearance"?: "default" | "minimal";
        /**
          * optionally display an icon based on status
         */
        "icon"?: boolean;
        /**
          * specify the scale of the input, defaults to m
         */
        "scale"?: "s" | "m" | "l";
        /**
          * specify the status of the input field, determines message and icons
         */
        "status"?: "invalid" | "valid" | "idle";
        /**
          * specify the theme, defaults to light
         */
        "theme"?: "light" | "dark";
        /**
          * specify the appearance of any slotted message - default (displayed under input), or floating (positioned absolutely under input)
         */
        "type"?: "default" | "floating";
    }
    interface CalciteLabel {
        /**
          * is the wrapped element positioned inline with the label slotted text
         */
        "layout"?: "inline" | "inline-space-between" | "default";
        "onCalciteLabelSelectedEvent"?: (event: CustomEvent<any>) => void;
        /**
          * specify the scale of the input, defaults to m
         */
        "scale"?: "s" | "m" | "l";
        /**
          * specify the status of the label and any child input / input messages
         */
        "status"?: "invalid" | "valid" | "idle";
        /**
          * specify theme of the lavel and its any child input / input messages
         */
        "theme"?: "light" | "dark";
    }
    interface CalciteLink {
        /**
          * specify the color of the link, defaults to blue
         */
        "color"?: "blue" | "dark" | "light" | "red";
        /**
          * is the link disabled
         */
        "disabled"?: boolean;
        /**
          * optionally pass a href - used to determine if the component should render as a link or an anchor
         */
        "href"?: string;
        /**
          * optionally pass an icon to display - accepts Calcite UI icon names
         */
        "icon"?: string;
        /**
          * optionally used with icon, select where to position the icon
         */
        "iconPosition"?: "start" | "end";
        /**
          * Select theme (light or dark)
         */
        "theme"?: "light" | "dark";
    }
    interface CalciteLoader {
        /**
          * Inline loaders are smaller and will appear to the left of the text
         */
        "inline"?: boolean;
        /**
          * Show the loader
         */
        "isActive"?: boolean;
        /**
          * Turn off spacing around the loader
         */
        "noPadding"?: boolean;
        /**
          * Text which should appear under the loading indicator (optional)
         */
        "text"?: string;
        /**
          * Use indeterminate if finding actual progress value is impossible
         */
        "type"?: "indeterminate" | "determinate";
        /**
          * Percent complete of 100, only valid for determinate indicators
         */
        "value"?: number;
    }
    interface CalciteModal {
        /**
          * Optionally pass a function to run before close
         */
        "beforeClose"?: (el: HTMLElement) => Promise<void>;
        /**
          * Aria label for the close button
         */
        "closeLabel"?: string;
        /**
          * Adds a color bar at the top for visual impact, Use color to add importance to desctructive/workflow dialogs.
         */
        "color"?: "red" | "blue";
        /**
          * Flag to disable the default close on escape behavior
         */
        "disableEscape"?: boolean;
        /**
          * Prevent the modal from taking up the entire screen on mobile
         */
        "docked"?: boolean;
        /**
          * Specify an element to focus when the modal is first opened
         */
        "firstFocus"?: HTMLElement;
        /**
          * Turn off spacing around the content area slot
         */
        "noPadding"?: boolean;
        /**
          * Fired when the modal begins the close animation
         */
        "onCalciteModalClose"?: (event: CustomEvent<any>) => void;
        /**
          * Fired when the modal begins the open animation
         */
        "onCalciteModalOpen"?: (event: CustomEvent<any>) => void;
        /**
          * Set the overall size of the modal
         */
        "size"?: "small" | "medium" | "large" | "fullscreen";
        /**
          * Select theme (light or dark)
         */
        "theme"?: "light" | "dark";
    }
    interface CalciteNotice {
        /**
          * Is the notice currently active or not
         */
        "active"?: boolean;
        /**
          * Color for the notice (will apply to top border and icon)
         */
        "color"?: "blue" | "green" | "red" | "yellow";
        /**
          * Select theme (light or dark)
         */
        "dismissible"?: boolean;
        /**
          * If false, no icon will be shown in the notice
         */
        "icon"?: boolean;
        /**
          * Fired when an notice is closed
         */
        "onCalciteNoticeClose"?: (event: CustomEvent<any>) => void;
        /**
          * Fired when an Notice is opened
         */
        "onCalciteNoticeOpen"?: (event: CustomEvent<any>) => void;
        /**
          * specify the scale of the notice, defaults to m
         */
        "scale"?: "s" | "m" | "l";
        /**
          * Select theme (light or dark)
         */
        "theme"?: "light" | "dark";
        /**
          * specify the width of the notice, defaults to m
         */
        "width"?: "auto" | "half" | "full";
    }
    interface CalcitePagination {
        /**
          * number of items per page
         */
        "num"?: number;
        /**
          * Emitted whenever the selected page changes.
          * @event calcitePaginationUpdate
         */
        "onCalcitePaginationUpdate"?: (event: CustomEvent<CalcitePaginationDetail>) => void;
        /**
          * The scale of the pagination
         */
        "scale"?: "s" | "m" | "l";
        /**
          * index of item that should begin the page
         */
        "start"?: number;
        /**
          * title of the next button
         */
        "textLabelNext"?: string;
        /**
          * title of the previous button
         */
        "textLabelPrevious"?: string;
        /**
          * specify the theme of accordion, defaults to light
         */
        "theme"?: "light" | "dark";
        /**
          * total number of items
         */
        "total"?: number;
    }
    interface CalcitePopover {
        /**
          * Display a close button within the Popover.
         */
        "closeButton"?: boolean;
        /**
          * Prevents flipping the popover's placement when it starts to overlap its reference element.
         */
        "disableFlip"?: boolean;
        /**
          * Removes the caret pointer.
         */
        "disablePointer"?: boolean;
        /**
          * Defines the available placements that can be used when a flip occurs.
         */
        "flipPlacements"?: Placement[];
        /**
          * Offset the position of the popover away from the reference element.
         */
        "offsetDistance"?: number;
        /**
          * Offset the position of the popover along the reference element.
         */
        "offsetSkidding"?: number;
        /**
          * Fired when the popover is closed
         */
        "onCalcitePopoverClose"?: (event: CustomEvent<any>) => void;
        /**
          * Fired when the popover is opened
         */
        "onCalcitePopoverOpen"?: (event: CustomEvent<any>) => void;
        /**
          * Display and position the component.
         */
        "open"?: boolean;
        /**
          * Determines where the component will be positioned relative to the referenceElement.
         */
        "placement"?: CalcitePlacement;
        /**
          * Reference HTMLElement used to position this component according to the placement property.
         */
        "referenceElement": HTMLElement | string;
        /**
          * Text for close button.
         */
        "textClose"?: string;
        /**
          * Select theme (light or dark)
         */
        "theme"?: "light" | "dark";
    }
    interface CalcitePopoverManager {
        /**
          * CSS Selector to match reference elements for popovers.
         */
        "selector"?: string;
    }
    interface CalciteProgress {
        /**
          * Fill bar in the opposite direction
         */
        "reversed"?: boolean;
        /**
          * Text label for the progress indicator
         */
        "text"?: string;
        /**
          * Select theme (light or dark)
         */
        "theme"?: "light" | "dark";
        /**
          * Use indeterminate if finding actual progress value is impossible
         */
        "type"?: "indeterminate" | "determinate";
        /**
          * Percent complete of 100
         */
        "value"?: number;
    }
    interface CalciteRadioGroup {
        /**
          * specify the appearance style of the radio group, defaults to solid.
         */
        "appearance"?: "solid" | "outline";
        /**
          * specify the layout of the radio group, defaults to horizontal
         */
        "layout"?: "horizontal" | "vertical";
        /**
          * The group's name. Gets submitted with the form.
         */
        "name"?: string;
        "onCalciteRadioGroupChange"?: (event: CustomEvent<any>) => void;
        /**
          * The scale of the radio group
         */
        "scale"?: "s" | "m" | "l";
        /**
          * The group's selected item.
         */
        "selectedItem"?: HTMLCalciteRadioGroupItemElement;
        /**
          * The component's theme.
         */
        "theme"?: "light" | "dark";
    }
    interface CalciteRadioGroupItem {
        /**
          * Indicates whether the control is checked.
         */
        "checked"?: boolean;
        "onCalciteRadioGroupItemChange"?: (event: CustomEvent<any>) => void;
        /**
          * The control's value.
         */
        "value"?: any | null;
    }
    interface CalciteSlider {
        /**
          * Disable and gray out the slider
         */
        "disabled"?: boolean;
        /**
          * Label handles with their numeric value
         */
        "labelHandles"?: boolean;
        /**
          * Label tick marks with their numeric value.
         */
        "labelTicks"?: boolean;
        /**
          * Maximum selectable value
         */
        "max"?: number;
        /**
          * Label for second handle if needed (ex. "Temperature, upper bound")
         */
        "maxLabel"?: string;
        /**
          * Currently selected upper number (if multi-select)
         */
        "maxValue"?: number;
        /**
          * Minimum selectable value
         */
        "min"?: number;
        /**
          * Label for first (or only) handle (ex. "Temperature, lower bound")
         */
        "minLabel"?: string;
        /**
          * Currently selected lower number (if multi-select)
         */
        "minValue"?: number;
        /**
          * Fires on all updates to the slider. :warning: Will be fired frequently during drag. If you are performing any expensive operations consider using a debounce or throttle to avoid locking up the main thread.
         */
        "onCalciteSliderUpdate"?: (event: CustomEvent<any>) => void;
        /**
          * Interval to move on page up/page down keys
         */
        "pageStep"?: number;
        /**
          * Use finer point for handles
         */
        "precise"?: boolean;
        /**
          * Snap selection along the step interval
         */
        "snap"?: boolean;
        /**
          * Interval to move on up/down keys
         */
        "step"?: number;
        /**
          * Select theme (light or dark)
         */
        "theme"?: "light" | "dark";
        /**
          * Show tick marks on the number line at provided interval
         */
        "ticks"?: number;
        /**
          * Currently selected number (if single select)
         */
        "value"?: null | number;
    }
    interface CalciteSplitButton {
        /**
          * specify the color of the control, defaults to blue
         */
        "color"?: "blue" | "dark" | "light" | "red";
        /**
          * is the control disabled
         */
        "disabled"?: boolean;
        /**
          * specify the icon used for the dropdown menu, defaults to chevron
         */
        "dropdownIconType"?: "chevron" | "caret";
        /**
          * aria label for overflow button
         */
        "dropdownLabel"?: string;
        /**
          * optionally add a calcite-loader component to the control, disabling interaction. with the primary button
         */
        "loading"?: boolean;
        /**
          * fired when the primary button is clicked
         */
        "onCalciteSplitButtonPrimaryClick"?: (event: CustomEvent<any>) => void;
        /**
          * optionally pass an icon to display on the primary button - accepts Calcite UI icon names
         */
        "primaryIcon"?: string;
        /**
          * optionally pass an aria-label for the primary button
         */
        "primaryLabel"?: string;
        /**
          * text for primary action button
         */
        "primaryText"?: string;
        /**
          * specify the scale of the control, defaults to m
         */
        "scale"?: "s" | "m" | "l";
        /**
          * select theme (light or dark), defaults to light
         */
        "theme"?: "light" | "dark";
    }
    interface CalciteStepper {
        /**
          * optionally display a status icon next to the step title
         */
        "icon"?: boolean;
        /**
          * specify the layout of stepper, defaults to horizontal
         */
        "layout"?: "horizontal" | "vertical";
        /**
          * optionally display the number next to the step title
         */
        "numbered"?: boolean;
        "onCalciteStepperItemHasChanged"?: (event: CustomEvent<any>) => void;
        /**
          * specify the scale of stepper, defaults to m
         */
        "scale"?: "s" | "m" | "l";
        /**
          * specify the theme of stepper, defaults to light
         */
        "theme"?: "light" | "dark";
    }
    interface CalciteStepperItem {
        /**
          * is the step active
         */
        "active"?: boolean;
        /**
          * has the step been completed
         */
        "complete"?: boolean;
        /**
          * is the step disabled and not navigable to by a user
         */
        "disabled"?: boolean;
        /**
          * does the step contain an error that needs to be resolved by the user
         */
        "error"?: boolean;
        /**
          * pass a title for the stepper item
         */
        "itemSubtitle"?: string;
        /**
          * pass a title for the stepper item
         */
        "itemTitle"?: string;
        "onCalciteStepperItemKeyEvent"?: (event: CustomEvent<any>) => void;
        "onCalciteStepperItemSelected"?: (event: CustomEvent<any>) => void;
        "onRegisterCalciteStepperItem"?: (event: CustomEvent<any>) => void;
    }
    interface CalciteSwitch {
        /**
          * What color the switch should be
         */
        "color"?: "red" | "blue";
        /**
          * The name of the checkbox input
         */
        "name"?: string;
        "onCalciteSwitchChange"?: (event: CustomEvent<any>) => void;
        "onChange"?: (event: CustomEvent<any>) => void;
        /**
          * The scale of the switch
         */
        "scale"?: "s" | "m" | "l";
        /**
          * True if the switch is initially on
         */
        "switched"?: boolean;
        /**
          * The component's theme.
         */
        "theme"?: "light" | "dark";
        /**
          * The value of the checkbox input
         */
        "value"?: string;
    }
    interface CalciteTab {
        /**
          * Show this tab
         */
        "isActive"?: boolean;
        /**
          * Optionally include a unique name for this tab, be sure to also set this name on the associated title.
         */
        "tab"?: string;
    }
    interface CalciteTabNav {
        /**
          * Emitted when the active tab changes
         */
        "onCalciteTabChange"?: (event: CustomEvent<TabChangeEventDetail>) => void;
        /**
          * Name to use when saving selected tab data to localStorage
         */
        "storageId"?: string;
        /**
          * Pass the same string to multiple tab navs to keep them all in sync if one changes
         */
        "syncId"?: string;
    }
    interface CalciteTabTitle {
        /**
          * Show this tab title as selected
         */
        "isActive"?: boolean;
        /**
          * Fires when a specific tab is activated. `event.details`: [TabChangeEventDetail](../../interfaces/TabChange.ts)
         */
        "onCalciteTabsActivate"?: (event: CustomEvent<TabChangeEventDetail>) => void;
        /**
          * Optionally include a unique name for the tab title, be sure to also set this name on the associated tab.
         */
        "tab"?: string;
    }
    interface CalciteTabs {
        /**
          * Align tab titles to the edge or fully justify them across the tab nav ("center")
         */
        "layout"?: "center" | "inline";
        /**
          * Select theme (light or dark)
         */
        "theme"?: "light" | "dark";
    }
    interface CalciteTooltip {
        /**
          * Offset the position of the popover away from the reference element.
         */
        "offsetDistance"?: number;
        /**
          * Offset the position of the popover along the reference element.
         */
        "offsetSkidding"?: number;
        /**
          * Display and position the component.
         */
        "open"?: boolean;
        /**
          * Determines where the component will be positioned relative to the referenceElement.
         */
        "placement"?: CalcitePlacement;
        /**
          * Reference HTMLElement used to position this component.
         */
        "referenceElement": HTMLElement | string;
        /**
          * Select theme (light or dark)
         */
        "theme"?: "light" | "dark";
    }
    interface CalciteTooltipManager {
        /**
          * CSS Selector to match reference elements for tooltips.
         */
        "selector"?: string;
    }
    interface CalciteTree {
        /**
          * Display indentation guide lines
         */
        "lines"?: boolean;
        "onCalciteTreeSelect"?: (event: CustomEvent<TreeSelectDetail>) => void;
        /**
          * Specify the scale of the tree, defaults to m
         */
        "scale"?: "s" | "m";
        /**
          * Customize how tree selection works (single, multi, children, multi-children)
         */
        "selectionMode"?: TreeSelectionMode;
        /**
          * Select theme (light or dark)
         */
        "theme"?: "light" | "dark";
    }
    interface CalciteTreeItem {
        /**
          * True if the item is in an expanded state
         */
        "expanded"?: boolean;
        "onCalciteTreeItemSelect"?: (event: CustomEvent<TreeItemSelectDetail>) => void;
        /**
          * Is the item currently selected
         */
        "selected"?: boolean;
    }
    interface IntrinsicElements {
        "calcite-accordion": CalciteAccordion;
        "calcite-accordion-item": CalciteAccordionItem;
        "calcite-alert": CalciteAlert;
        "calcite-button": CalciteButton;
        "calcite-card": CalciteCard;
        "calcite-checkbox": CalciteCheckbox;
        "calcite-chip": CalciteChip;
        "calcite-combobox": CalciteCombobox;
        "calcite-combobox-item": CalciteComboboxItem;
        "calcite-date": CalciteDate;
        "calcite-date-day": CalciteDateDay;
        "calcite-date-month": CalciteDateMonth;
        "calcite-date-month-header": CalciteDateMonthHeader;
        "calcite-dropdown": CalciteDropdown;
        "calcite-dropdown-group": CalciteDropdownGroup;
        "calcite-dropdown-item": CalciteDropdownItem;
        "calcite-example": CalciteExample;
        "calcite-icon": CalciteIcon;
        "calcite-input": CalciteInput;
        "calcite-input-message": CalciteInputMessage;
        "calcite-label": CalciteLabel;
        "calcite-link": CalciteLink;
        "calcite-loader": CalciteLoader;
        "calcite-modal": CalciteModal;
        "calcite-notice": CalciteNotice;
        "calcite-pagination": CalcitePagination;
        "calcite-popover": CalcitePopover;
        "calcite-popover-manager": CalcitePopoverManager;
        "calcite-progress": CalciteProgress;
        "calcite-radio-group": CalciteRadioGroup;
        "calcite-radio-group-item": CalciteRadioGroupItem;
        "calcite-slider": CalciteSlider;
        "calcite-split-button": CalciteSplitButton;
        "calcite-stepper": CalciteStepper;
        "calcite-stepper-item": CalciteStepperItem;
        "calcite-switch": CalciteSwitch;
        "calcite-tab": CalciteTab;
        "calcite-tab-nav": CalciteTabNav;
        "calcite-tab-title": CalciteTabTitle;
        "calcite-tabs": CalciteTabs;
        "calcite-tooltip": CalciteTooltip;
        "calcite-tooltip-manager": CalciteTooltipManager;
        "calcite-tree": CalciteTree;
        "calcite-tree-item": CalciteTreeItem;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "calcite-accordion": LocalJSX.CalciteAccordion & JSXBase.HTMLAttributes<HTMLCalciteAccordionElement>;
            "calcite-accordion-item": LocalJSX.CalciteAccordionItem & JSXBase.HTMLAttributes<HTMLCalciteAccordionItemElement>;
            "calcite-alert": LocalJSX.CalciteAlert & JSXBase.HTMLAttributes<HTMLCalciteAlertElement>;
            "calcite-button": LocalJSX.CalciteButton & JSXBase.HTMLAttributes<HTMLCalciteButtonElement>;
            "calcite-card": LocalJSX.CalciteCard & JSXBase.HTMLAttributes<HTMLCalciteCardElement>;
            "calcite-checkbox": LocalJSX.CalciteCheckbox & JSXBase.HTMLAttributes<HTMLCalciteCheckboxElement>;
            "calcite-chip": LocalJSX.CalciteChip & JSXBase.HTMLAttributes<HTMLCalciteChipElement>;
            "calcite-combobox": LocalJSX.CalciteCombobox & JSXBase.HTMLAttributes<HTMLCalciteComboboxElement>;
            "calcite-combobox-item": LocalJSX.CalciteComboboxItem & JSXBase.HTMLAttributes<HTMLCalciteComboboxItemElement>;
            "calcite-date": LocalJSX.CalciteDate & JSXBase.HTMLAttributes<HTMLCalciteDateElement>;
            "calcite-date-day": LocalJSX.CalciteDateDay & JSXBase.HTMLAttributes<HTMLCalciteDateDayElement>;
            "calcite-date-month": LocalJSX.CalciteDateMonth & JSXBase.HTMLAttributes<HTMLCalciteDateMonthElement>;
            "calcite-date-month-header": LocalJSX.CalciteDateMonthHeader & JSXBase.HTMLAttributes<HTMLCalciteDateMonthHeaderElement>;
            "calcite-dropdown": LocalJSX.CalciteDropdown & JSXBase.HTMLAttributes<HTMLCalciteDropdownElement>;
            "calcite-dropdown-group": LocalJSX.CalciteDropdownGroup & JSXBase.HTMLAttributes<HTMLCalciteDropdownGroupElement>;
            "calcite-dropdown-item": LocalJSX.CalciteDropdownItem & JSXBase.HTMLAttributes<HTMLCalciteDropdownItemElement>;
            "calcite-example": LocalJSX.CalciteExample & JSXBase.HTMLAttributes<HTMLCalciteExampleElement>;
            "calcite-icon": LocalJSX.CalciteIcon & JSXBase.HTMLAttributes<HTMLCalciteIconElement>;
            "calcite-input": LocalJSX.CalciteInput & JSXBase.HTMLAttributes<HTMLCalciteInputElement>;
            "calcite-input-message": LocalJSX.CalciteInputMessage & JSXBase.HTMLAttributes<HTMLCalciteInputMessageElement>;
            "calcite-label": LocalJSX.CalciteLabel & JSXBase.HTMLAttributes<HTMLCalciteLabelElement>;
            "calcite-link": LocalJSX.CalciteLink & JSXBase.HTMLAttributes<HTMLCalciteLinkElement>;
            "calcite-loader": LocalJSX.CalciteLoader & JSXBase.HTMLAttributes<HTMLCalciteLoaderElement>;
            "calcite-modal": LocalJSX.CalciteModal & JSXBase.HTMLAttributes<HTMLCalciteModalElement>;
            "calcite-notice": LocalJSX.CalciteNotice & JSXBase.HTMLAttributes<HTMLCalciteNoticeElement>;
            "calcite-pagination": LocalJSX.CalcitePagination & JSXBase.HTMLAttributes<HTMLCalcitePaginationElement>;
            "calcite-popover": LocalJSX.CalcitePopover & JSXBase.HTMLAttributes<HTMLCalcitePopoverElement>;
            "calcite-popover-manager": LocalJSX.CalcitePopoverManager & JSXBase.HTMLAttributes<HTMLCalcitePopoverManagerElement>;
            "calcite-progress": LocalJSX.CalciteProgress & JSXBase.HTMLAttributes<HTMLCalciteProgressElement>;
            "calcite-radio-group": LocalJSX.CalciteRadioGroup & JSXBase.HTMLAttributes<HTMLCalciteRadioGroupElement>;
            "calcite-radio-group-item": LocalJSX.CalciteRadioGroupItem & JSXBase.HTMLAttributes<HTMLCalciteRadioGroupItemElement>;
            "calcite-slider": LocalJSX.CalciteSlider & JSXBase.HTMLAttributes<HTMLCalciteSliderElement>;
            "calcite-split-button": LocalJSX.CalciteSplitButton & JSXBase.HTMLAttributes<HTMLCalciteSplitButtonElement>;
            "calcite-stepper": LocalJSX.CalciteStepper & JSXBase.HTMLAttributes<HTMLCalciteStepperElement>;
            "calcite-stepper-item": LocalJSX.CalciteStepperItem & JSXBase.HTMLAttributes<HTMLCalciteStepperItemElement>;
            "calcite-switch": LocalJSX.CalciteSwitch & JSXBase.HTMLAttributes<HTMLCalciteSwitchElement>;
            "calcite-tab": LocalJSX.CalciteTab & JSXBase.HTMLAttributes<HTMLCalciteTabElement>;
            "calcite-tab-nav": LocalJSX.CalciteTabNav & JSXBase.HTMLAttributes<HTMLCalciteTabNavElement>;
            "calcite-tab-title": LocalJSX.CalciteTabTitle & JSXBase.HTMLAttributes<HTMLCalciteTabTitleElement>;
            "calcite-tabs": LocalJSX.CalciteTabs & JSXBase.HTMLAttributes<HTMLCalciteTabsElement>;
            "calcite-tooltip": LocalJSX.CalciteTooltip & JSXBase.HTMLAttributes<HTMLCalciteTooltipElement>;
            "calcite-tooltip-manager": LocalJSX.CalciteTooltipManager & JSXBase.HTMLAttributes<HTMLCalciteTooltipManagerElement>;
            "calcite-tree": LocalJSX.CalciteTree & JSXBase.HTMLAttributes<HTMLCalciteTreeElement>;
            "calcite-tree-item": LocalJSX.CalciteTreeItem & JSXBase.HTMLAttributes<HTMLCalciteTreeItemElement>;
        }
    }
}
