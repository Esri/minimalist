/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "./stencil-public-runtime";
import { CalciteAppearance, CalciteBlockSectionToggleDisplay, CalciteLayout, CalcitePosition, CalciteScale, CalciteTheme, } from "./interfaces";
import { ICON_TYPES, } from "./calcite-pick-list/resources";
export namespace Components {
    interface CalciteAction {
        /**
          * Indicates whether the action is highlighted.
         */
        "active": boolean;
        /**
          * Specify the appearance style of the action, defaults to solid.
         */
        "appearance": CalciteAppearance;
        /**
          * Compact mode is used internally by components to reduce side padding, e.g. calcite-block-section.
         */
        "compact": boolean;
        /**
          * When true, disabled prevents interaction. This state shows items with lower opacity/grayed.
         */
        "disabled": boolean;
        /**
          * The name of the icon to display. The value of this property must match the icon name from https://esri.github.io/calcite-ui-icons/.
         */
        "icon"?: string;
        /**
          * Indicates unread changes.
         */
        "indicator": boolean;
        /**
          * Label of the action, exposed on hover. If no label is provided, the label inherits what's provided for the `text` prop.
         */
        "label"?: string;
        /**
          * When true, content is waiting to be loaded. This state shows a busy indicator.
         */
        "loading": boolean;
        /**
          * Specifies the size of the action.
         */
        "scale": CalciteScale;
        "setFocus": () => Promise<void>;
        /**
          * Text that accompanies the action icon.
         */
        "text": string;
        /**
          * Indicates whether the text is displayed.
         */
        "textEnabled": boolean;
        /**
          * Used to set the component's color scheme.
         */
        "theme": CalciteTheme;
    }
    interface CalciteActionBar {
        /**
          * Indicates whether widget can be expanded.
         */
        "expand": boolean;
        /**
          * Indicates whether widget is expanded.
         */
        "expanded": boolean;
        /**
          * Updates the label of the collapse icon when the component is expanded.
         */
        "intlCollapse"?: string;
        /**
          * Updates the label of the expand icon when the component is not expanded.
         */
        "intlExpand"?: string;
        /**
          * Arrangement of the component. Leading and trailing are different depending on if the direction is LTR or RTL. For example, "leading" in a LTR app will appear on the left.
          * @deprecated use "position" instead.
         */
        "layout": CalciteLayout;
        /**
          * Arranges the component depending on the elements 'dir' property.
         */
        "position": CalcitePosition;
        /**
          * Updates the label of the collapse icon when the component is expanded.
          * @deprecated use "intlCollapse" instead.
         */
        "textCollapse"?: string;
        /**
          * Updates the label of the expand icon when the component is not expanded.
          * @deprecated use "intlExpand" instead.
         */
        "textExpand"?: string;
        /**
          * Used to set the component's color scheme.
         */
        "theme": CalciteTheme;
        /**
          * Used to set the tooltip for the expand toggle.
         */
        "tooltipExpand"?: HTMLCalciteTooltipElement;
    }
    interface CalciteActionGroup {
    }
    interface CalciteActionPad {
        /**
          * Indicates whether widget can be expanded.
         */
        "expand": boolean;
        /**
          * Indicates whether widget is expanded.
         */
        "expanded": boolean;
        /**
          * Updates the label of the collapse icon when the component is expanded.
         */
        "intlCollapse"?: string;
        /**
          * Updates the label of the expand icon when the component is not expanded.
         */
        "intlExpand"?: string;
        /**
          * Arrangement of the component.
          * @deprecated use "position" instead.
         */
        "layout": CalciteLayout;
        /**
          * Arranges the component depending on the elements 'dir' property.
         */
        "position": CalcitePosition;
        /**
          * Updates the label of the collapse icon when the component is expanded.
          * @deprecated use "intlCollapse" instead.
         */
        "textCollapse"?: string;
        /**
          * Updates the label of the expand icon when the component is not expanded.
          * @deprecated use "intlExpand" instead.
         */
        "textExpand"?: string;
        /**
          * Used to set the component's color scheme.
         */
        "theme": CalciteTheme;
        /**
          * Used to set the tooltip for the expand toggle.
         */
        "tooltipExpand"?: HTMLCalciteTooltipElement;
    }
    interface CalciteBlock {
        /**
          * When true, this block will be collapsible.
         */
        "collapsible": boolean;
        /**
          * When true, disabled prevents interaction. This state shows items with lower opacity/grayed.
         */
        "disabled": boolean;
        /**
          * When true, displays a drag handle in the header.
         */
        "dragHandle": boolean;
        /**
          * Block heading.
         */
        "heading": string;
        /**
          * Tooltip used for the toggle when expanded.
         */
        "intlCollapse"?: string;
        /**
          * Tooltip used for the toggle when collapsed.
         */
        "intlExpand"?: string;
        /**
          * When true, content is waiting to be loaded. This state shows a busy indicator.
         */
        "loading": boolean;
        /**
          * When true, the block's content will be displayed.
         */
        "open": boolean;
        /**
          * Block summary.
         */
        "summary": string;
        /**
          * Tooltip used for the toggle when expanded.
          * @deprecated use "intlCollapse" instead.
         */
        "textCollapse"?: string;
        /**
          * Tooltip used for the toggle when collapsed.
          * @deprecated use "intlExpand" instead.
         */
        "textExpand"?: string;
        /**
          * Used to set the component's color scheme.
         */
        "theme": CalciteTheme;
    }
    interface CalciteBlockSection {
        /**
          * Tooltip used for the toggle when expanded.
         */
        "intlCollapse"?: string;
        /**
          * Tooltip used for the toggle when collapsed.
         */
        "intlExpand"?: string;
        /**
          * When true, the block's section content will be displayed.
         */
        "open": boolean;
        /**
          * Text displayed in the button.
         */
        "text": string;
        /**
          * Tooltip used for the toggle when expanded.
          * @deprecated use "intlCollapse" instead.
         */
        "textCollapse"?: string;
        /**
          * Tooltip used for the toggle when collapsed.
          * @deprecated use "intlExpand" instead.
         */
        "textExpand"?: string;
        /**
          * This property determines the look of the section toggle. If the value is "switch", a toggle-switch will be displayed. If the value is "button", a clickable header is displayed.
          * @todo revisit doc
         */
        "toggleDisplay": CalciteBlockSectionToggleDisplay;
    }
    interface CalciteFab {
        /**
          * Used to set the button's appearance. Default is outline.
         */
        "appearance": CalciteAppearance;
        /**
          * When true, disabled prevents interaction. This state shows items with lower opacity/grayed.
         */
        "disabled": boolean;
        /**
          * The name of the icon to display. The value of this property must match the icon name from https://esri.github.io/calcite-ui-icons/.
         */
        "icon"?: string;
        /**
          * Label of the FAB, exposed on hover. If no label is provided, the label inherits what's provided for the `text` prop.
         */
        "label"?: string;
        /**
          * When true, content is waiting to be loaded. This state shows a busy indicator.
         */
        "loading": boolean;
        /**
          * Specifies the size of the fab.
         */
        "scale": CalciteScale;
        "setFocus": () => Promise<void>;
        /**
          * Text that accompanies the FAB icon.
         */
        "text"?: string;
        /**
          * Indicates whether the text is displayed.
         */
        "textEnabled": boolean;
        /**
          * Used to set the component's color scheme.
         */
        "theme": CalciteTheme;
    }
    interface CalciteFilter {
        /**
          * The input data. The filter uses this as the starting point, and returns items that contain the string entered in the input, using a partial match and recursive search.
         */
        "data": object[];
        /**
          * A text label that will appear on the clear button.
         */
        "intlClear"?: string;
        /**
          * A text label that will appear next to the input field.
         */
        "intlLabel"?: string;
        /**
          * Placeholder text for the input element's placeholder attribute
         */
        "placeholder"?: string;
        /**
          * A text label that will appear next to the input field.
          * @deprecated use "intlLabel" instead.
         */
        "textLabel"?: string;
        /**
          * Placeholder text for the input element's placeholder attribute
          * @deprecated use "placeholder" instead.
         */
        "textPlaceholder"?: string;
    }
    interface CalciteFlow {
        /**
          * Removes the currently active `calcite-flow-item`.
         */
        "back": () => Promise<HTMLCalciteFlowItemElement>;
        /**
          * Used to set the component's color scheme.
         */
        "theme": CalciteTheme;
    }
    interface CalciteFlowItem {
        /**
          * When provided, this method will be called before it is removed from the parent flow.
         */
        "beforeBack"?: () => Promise<void>;
        /**
          * When true, disabled prevents interaction. This state shows items with lower opacity/grayed.
         */
        "disabled": boolean;
        /**
          * Heading text.
         */
        "heading": string;
        /**
          * Specifies the maxiumum height of the panel that this wraps.
         */
        "heightScale": CalciteScale;
        /**
          * 'Back' text string.
         */
        "intlBack"?: string;
        /**
          * 'Close' text string for the close button. The close button will only be shown when 'dismissible' is true.
         */
        "intlClose"?: string;
        /**
          * 'Open' text string for the menu.
         */
        "intlOpen"?: string;
        /**
          * When true, content is waiting to be loaded. This state shows a busy indicator.
         */
        "loading": boolean;
        /**
          * Opens the action menu.
         */
        "menuOpen": boolean;
        /**
          * Shows a back button in the header.
         */
        "showBackButton": boolean;
        /**
          * Summary text. A description displayed underneath the heading.
         */
        "summary"?: string;
        /**
          * 'Back' text string.
          * @deprecated use "intlBack" instead.
         */
        "textBack"?: string;
        /**
          * 'Close' text string for the menu.
          * @deprecated use "intlClose" instead.
         */
        "textClose"?: string;
        /**
          * 'Open' text string for the menu.
          * @deprecated use "intlOpen" instead.
         */
        "textOpen"?: string;
        /**
          * Used to set the component's color scheme.
         */
        "theme": CalciteTheme;
    }
    interface CalciteHandle {
        "activated": boolean;
        "setFocus": () => Promise<void>;
        /**
          * Value for the button title attribute
         */
        "textTitle": string;
    }
    interface CalcitePanel {
        /**
          * When true, disabled prevents interaction. This state shows items with lower opacity/grayed.
         */
        "disabled": boolean;
        /**
          * Hides the panel.
         */
        "dismissed": boolean;
        /**
          * Displays a close button in the trailing side of the header.
         */
        "dismissible": boolean;
        /**
          * Specifies the maxiumum height of the panel.
         */
        "heightScale": CalciteScale;
        /**
          * 'Close' text string for the close button. The close button will only be shown when 'dismissible' is true.
         */
        "intlClose"?: string;
        /**
          * When true, content is waiting to be loaded. This state shows a busy indicator.
         */
        "loading": boolean;
        "setFocus": (focusId?: "dismiss-button") => Promise<void>;
        /**
          * 'Close' text string for the close button. The close button will only be shown when 'dismissible' is true.
          * @deprecated use "intlClose" instead.
         */
        "textClose"?: string;
        /**
          * Used to set the component's color scheme.
         */
        "theme": CalciteTheme;
    }
    interface CalcitePickList {
        /**
          * Compact removes the selection icon (radio or checkbox) and adds a compact attribute. This allows for a more compact version of the `calcite-pick-list-item`.
          * @deprecated This property will be removed in a future release.
         */
        "compact": boolean;
        /**
          * When true, disabled prevents interaction. This state shows items with lower opacity/grayed.
         */
        "disabled": boolean;
        /**
          * When true, an input appears at the top of the list that can be used by end users to filter items in the list.
         */
        "filterEnabled": boolean;
        "getSelectedItems": () => Promise<Map<string, object>>;
        /**
          * When true, content is waiting to be loaded. This state shows a busy indicator.
         */
        "loading": boolean;
        /**
          * Multiple works similar to standard radio buttons and checkboxes. When true, a user can select multiple items at a time. When false, only a single item can be selected at a time and selecting a new item will deselect any other selected items.
         */
        "multiple": boolean;
        "setFocus": () => Promise<void>;
        /**
          * Placeholder text for the filter input field.
         */
        "textFilterPlaceholder": string;
    }
    interface CalcitePickListGroup {
        /**
          * The title used for all nested `calcite-pick-list` rows
         */
        "textGroupTitle": string;
    }
    interface CalcitePickListItem {
        /**
          * Compact removes the selection icon (radio or checkbox) and adds a compact attribute. This allows for a more compact version of the `calcite-pick-list-item`.
          * @deprecated This property will be removed in a future release.
         */
        "compact"?: boolean;
        /**
          * When false, the item cannot be deselected by user interaction.
         */
        "disableDeselect": boolean;
        /**
          * When true, the item cannot be clicked and is visually muted.
         */
        "disabled"?: boolean;
        /**
          * Determines the icon SVG symbol that will be shown. Options are circle, square, grid or null.
         */
        "icon"?: ICON_TYPES | null;
        /**
          * Used to provide additional metadata to an item, primarily used when the parent list has a filter.
         */
        "metadata"?: object;
        /**
          * Set this to true to display a remove action that removes the item from the list.
         */
        "removable"?: boolean;
        /**
          * Set this to true to pre-select an item. Toggles when an item is checked/unchecked.
         */
        "selected": boolean;
        "setFocus": () => Promise<void>;
        /**
          * An optional description for this item.  This will appear below the label text.
         */
        "textDescription"?: string;
        /**
          * The main label for this item. This will appear next to the icon.
         */
        "textLabel": string;
        /**
          * The text for the remove item buttons. Only applicable if removable is true.
         */
        "textRemove": string;
        /**
          * Used to toggle the selection state. By default this won't trigger an event. The first argument allows the value to be coerced, rather than swapping values.
         */
        "toggleSelected": (coerce?: boolean) => Promise<void>;
        /**
          * A unique value used to identify this item - similar to the value attribute on an <input>.
         */
        "value": string;
    }
    interface CalciteShell {
        /**
          * Used to set the component's color scheme.
         */
        "theme": CalciteTheme;
    }
    interface CalciteShellPanel {
        /**
          * Hide the content panel.
         */
        "collapsed": boolean;
        /**
          * This property makes the content area appear like a "floating" panel.
         */
        "detached": boolean;
        /**
          * This sets limits the height of the content area. It only applies when detached is true.
         */
        "detachedScale": CalciteScale;
        /**
          * Arrangement of the component.
          * @deprecated use "position" instead.
         */
        "layout": CalciteLayout;
        /**
          * Arranges the component depending on the elements 'dir' property.
         */
        "position": CalcitePosition;
    }
    interface CalciteSortableList {
        /**
          * When true, disabled prevents interaction. This state shows items with lower opacity/grayed.
         */
        "disabled": boolean;
        /**
          * The class on the handle elements.
         */
        "handleSelector": string;
        /**
          * When true, content is waiting to be loaded. This state shows a busy indicator.
         */
        "loading": boolean;
    }
    interface CalciteTip {
        /**
          * No longer displays the tip.
         */
        "dismissed": boolean;
        /**
          * The heading of the tip.
         */
        "heading"?: string;
        /**
          * Alternate text for closing the tip.
         */
        "intlClose"?: string;
        /**
          * Indicates whether the tip can be dismissed.
         */
        "nonDismissible": boolean;
        /**
          * The selected state of the tip if it is being used inside a `calcite-tip-manager`.
         */
        "selected"?: boolean;
        /**
          * Alternate text for closing the tip.
          * @deprecated use "intlClose" instead.
         */
        "textClose"?: string;
        /**
          * Used to set the component's color scheme.
         */
        "theme": CalciteTheme;
    }
    interface CalciteTipGroup {
        /**
          * The title used for all nested tips.
         */
        "textGroupTitle"?: string;
    }
    interface CalciteTipManager {
        /**
          * Alternate text for closing the `calcite-tip-manager`.
         */
        "closed": boolean;
        /**
          * Alternate text for closing the tip.
         */
        "intlClose"?: string;
        /**
          * The default group title for the `calcite-tip-manager`.
         */
        "intlDefaultTitle"?: string;
        /**
          * Alternate text for navigating to the next tip.
         */
        "intlNext"?: string;
        /**
          * Label that appears on hover of pagination icon.
         */
        "intlPaginationLabel"?: string;
        /**
          * Alternate text for navigating to the previous tip.
         */
        "intlPrevious"?: string;
        "nextTip": () => Promise<void>;
        "previousTip": () => Promise<void>;
        /**
          * Alternate text for closing the tip.
          * @deprecated use "intlClose" instead.
         */
        "textClose"?: string;
        /**
          * The default group title for the `calcite-tip-manager`.
          * @deprecated use "intlDefaultTitle" instead.
         */
        "textDefaultTitle"?: string;
        /**
          * Alternate text for navigating to the next tip.
          * @deprecated use "intlNext" instead.
         */
        "textNext"?: string;
        /**
          * Label that appears on hover of pagination icon.
          * @deprecated use "intlPaginationLabel" instead.
         */
        "textPaginationLabel"?: string;
        /**
          * Alternate text for navigating to the previous tip.
          * @deprecated use "intlPrevious" instead.
         */
        "textPrevious"?: string;
        /**
          * Used to set the component's color scheme.
         */
        "theme": CalciteTheme;
    }
    interface CalciteValueList {
        /**
          * Compact reduces the size of all items in the list.
          * @deprecated This property will be removed in a future release.
         */
        "compact": boolean;
        /**
          * When true, disabled prevents interaction. This state shows items with lower opacity/grayed.
         */
        "disabled": boolean;
        /**
          * When true, the items will be sortable via drag and drop.
         */
        "dragEnabled": boolean;
        /**
          * When true, an input appears at the top of the list that can be used by end users to filter items in the list.
         */
        "filterEnabled": boolean;
        "getSelectedItems": () => Promise<Map<string, object>>;
        /**
          * When true, content is waiting to be loaded. This state shows a busy indicator.
         */
        "loading": boolean;
        /**
          * Multiple Works similar to standard radio buttons and checkboxes. When true, a user can select multiple items at a time. When false, only a single item can be selected at a time and selecting a new item will deselect any other selected items.
         */
        "multiple": boolean;
        "setFocus": () => Promise<void>;
        /**
          * Placeholder text for the filter input field.
         */
        "textFilterPlaceholder": string;
    }
    interface CalciteValueListItem {
        /**
          * Compact reduces the size of the item.
          * @deprecated This property will be removed in a future release.
         */
        "compact"?: boolean;
        "disableDeselect": boolean;
        /**
          * When true, the item cannot be clicked and is visually muted
         */
        "disabled"?: boolean;
        "handleActivated"?: boolean;
        /**
          * Determines the icon SVG symbol that will be shown. Options are circle, square, grid or null.
         */
        "icon"?: ICON_TYPES | null;
        /**
          * Used to provide additional metadata to an item, primarily used when the parent list has a filter.
         */
        "metadata"?: object;
        /**
          * Set this to true to display a remove action that removes the item from the list.
         */
        "removable": boolean;
        /**
          * Set this to true to pre-select an item. Toggles when an item is checked/unchecked.
         */
        "selected": boolean;
        "setFocus": () => Promise<void>;
        /**
          * An optional description for this item. Will appear below the label text.
         */
        "textDescription"?: string;
        /**
          * The main label for this item. Appears next to the icon.
         */
        "textLabel": string;
        "toggleSelected": (coerce?: boolean) => Promise<void>;
        /**
          * A unique value used to identify this item - similar to the value attribute on an <input>.
         */
        "value": string;
    }
}
declare global {
    interface HTMLCalciteActionElement extends Components.CalciteAction, HTMLStencilElement {
    }
    var HTMLCalciteActionElement: {
        prototype: HTMLCalciteActionElement;
        new (): HTMLCalciteActionElement;
    };
    interface HTMLCalciteActionBarElement extends Components.CalciteActionBar, HTMLStencilElement {
    }
    var HTMLCalciteActionBarElement: {
        prototype: HTMLCalciteActionBarElement;
        new (): HTMLCalciteActionBarElement;
    };
    interface HTMLCalciteActionGroupElement extends Components.CalciteActionGroup, HTMLStencilElement {
    }
    var HTMLCalciteActionGroupElement: {
        prototype: HTMLCalciteActionGroupElement;
        new (): HTMLCalciteActionGroupElement;
    };
    interface HTMLCalciteActionPadElement extends Components.CalciteActionPad, HTMLStencilElement {
    }
    var HTMLCalciteActionPadElement: {
        prototype: HTMLCalciteActionPadElement;
        new (): HTMLCalciteActionPadElement;
    };
    interface HTMLCalciteBlockElement extends Components.CalciteBlock, HTMLStencilElement {
    }
    var HTMLCalciteBlockElement: {
        prototype: HTMLCalciteBlockElement;
        new (): HTMLCalciteBlockElement;
    };
    interface HTMLCalciteBlockSectionElement extends Components.CalciteBlockSection, HTMLStencilElement {
    }
    var HTMLCalciteBlockSectionElement: {
        prototype: HTMLCalciteBlockSectionElement;
        new (): HTMLCalciteBlockSectionElement;
    };
    interface HTMLCalciteFabElement extends Components.CalciteFab, HTMLStencilElement {
    }
    var HTMLCalciteFabElement: {
        prototype: HTMLCalciteFabElement;
        new (): HTMLCalciteFabElement;
    };
    interface HTMLCalciteFilterElement extends Components.CalciteFilter, HTMLStencilElement {
    }
    var HTMLCalciteFilterElement: {
        prototype: HTMLCalciteFilterElement;
        new (): HTMLCalciteFilterElement;
    };
    interface HTMLCalciteFlowElement extends Components.CalciteFlow, HTMLStencilElement {
    }
    var HTMLCalciteFlowElement: {
        prototype: HTMLCalciteFlowElement;
        new (): HTMLCalciteFlowElement;
    };
    interface HTMLCalciteFlowItemElement extends Components.CalciteFlowItem, HTMLStencilElement {
    }
    var HTMLCalciteFlowItemElement: {
        prototype: HTMLCalciteFlowItemElement;
        new (): HTMLCalciteFlowItemElement;
    };
    interface HTMLCalciteHandleElement extends Components.CalciteHandle, HTMLStencilElement {
    }
    var HTMLCalciteHandleElement: {
        prototype: HTMLCalciteHandleElement;
        new (): HTMLCalciteHandleElement;
    };
    interface HTMLCalcitePanelElement extends Components.CalcitePanel, HTMLStencilElement {
    }
    var HTMLCalcitePanelElement: {
        prototype: HTMLCalcitePanelElement;
        new (): HTMLCalcitePanelElement;
    };
    interface HTMLCalcitePickListElement extends Components.CalcitePickList, HTMLStencilElement {
    }
    var HTMLCalcitePickListElement: {
        prototype: HTMLCalcitePickListElement;
        new (): HTMLCalcitePickListElement;
    };
    interface HTMLCalcitePickListGroupElement extends Components.CalcitePickListGroup, HTMLStencilElement {
    }
    var HTMLCalcitePickListGroupElement: {
        prototype: HTMLCalcitePickListGroupElement;
        new (): HTMLCalcitePickListGroupElement;
    };
    interface HTMLCalcitePickListItemElement extends Components.CalcitePickListItem, HTMLStencilElement {
    }
    var HTMLCalcitePickListItemElement: {
        prototype: HTMLCalcitePickListItemElement;
        new (): HTMLCalcitePickListItemElement;
    };
    interface HTMLCalciteShellElement extends Components.CalciteShell, HTMLStencilElement {
    }
    var HTMLCalciteShellElement: {
        prototype: HTMLCalciteShellElement;
        new (): HTMLCalciteShellElement;
    };
    interface HTMLCalciteShellPanelElement extends Components.CalciteShellPanel, HTMLStencilElement {
    }
    var HTMLCalciteShellPanelElement: {
        prototype: HTMLCalciteShellPanelElement;
        new (): HTMLCalciteShellPanelElement;
    };
    interface HTMLCalciteSortableListElement extends Components.CalciteSortableList, HTMLStencilElement {
    }
    var HTMLCalciteSortableListElement: {
        prototype: HTMLCalciteSortableListElement;
        new (): HTMLCalciteSortableListElement;
    };
    interface HTMLCalciteTipElement extends Components.CalciteTip, HTMLStencilElement {
    }
    var HTMLCalciteTipElement: {
        prototype: HTMLCalciteTipElement;
        new (): HTMLCalciteTipElement;
    };
    interface HTMLCalciteTipGroupElement extends Components.CalciteTipGroup, HTMLStencilElement {
    }
    var HTMLCalciteTipGroupElement: {
        prototype: HTMLCalciteTipGroupElement;
        new (): HTMLCalciteTipGroupElement;
    };
    interface HTMLCalciteTipManagerElement extends Components.CalciteTipManager, HTMLStencilElement {
    }
    var HTMLCalciteTipManagerElement: {
        prototype: HTMLCalciteTipManagerElement;
        new (): HTMLCalciteTipManagerElement;
    };
    interface HTMLCalciteValueListElement extends Components.CalciteValueList, HTMLStencilElement {
    }
    var HTMLCalciteValueListElement: {
        prototype: HTMLCalciteValueListElement;
        new (): HTMLCalciteValueListElement;
    };
    interface HTMLCalciteValueListItemElement extends Components.CalciteValueListItem, HTMLStencilElement {
    }
    var HTMLCalciteValueListItemElement: {
        prototype: HTMLCalciteValueListItemElement;
        new (): HTMLCalciteValueListItemElement;
    };
    interface HTMLElementTagNameMap {
        "calcite-action": HTMLCalciteActionElement;
        "calcite-action-bar": HTMLCalciteActionBarElement;
        "calcite-action-group": HTMLCalciteActionGroupElement;
        "calcite-action-pad": HTMLCalciteActionPadElement;
        "calcite-block": HTMLCalciteBlockElement;
        "calcite-block-section": HTMLCalciteBlockSectionElement;
        "calcite-fab": HTMLCalciteFabElement;
        "calcite-filter": HTMLCalciteFilterElement;
        "calcite-flow": HTMLCalciteFlowElement;
        "calcite-flow-item": HTMLCalciteFlowItemElement;
        "calcite-handle": HTMLCalciteHandleElement;
        "calcite-panel": HTMLCalcitePanelElement;
        "calcite-pick-list": HTMLCalcitePickListElement;
        "calcite-pick-list-group": HTMLCalcitePickListGroupElement;
        "calcite-pick-list-item": HTMLCalcitePickListItemElement;
        "calcite-shell": HTMLCalciteShellElement;
        "calcite-shell-panel": HTMLCalciteShellPanelElement;
        "calcite-sortable-list": HTMLCalciteSortableListElement;
        "calcite-tip": HTMLCalciteTipElement;
        "calcite-tip-group": HTMLCalciteTipGroupElement;
        "calcite-tip-manager": HTMLCalciteTipManagerElement;
        "calcite-value-list": HTMLCalciteValueListElement;
        "calcite-value-list-item": HTMLCalciteValueListItemElement;
    }
}
declare namespace LocalJSX {
    interface CalciteAction {
        /**
          * Indicates whether the action is highlighted.
         */
        "active"?: boolean;
        /**
          * Specify the appearance style of the action, defaults to solid.
         */
        "appearance"?: CalciteAppearance;
        /**
          * Compact mode is used internally by components to reduce side padding, e.g. calcite-block-section.
         */
        "compact"?: boolean;
        /**
          * When true, disabled prevents interaction. This state shows items with lower opacity/grayed.
         */
        "disabled"?: boolean;
        /**
          * The name of the icon to display. The value of this property must match the icon name from https://esri.github.io/calcite-ui-icons/.
         */
        "icon"?: string;
        /**
          * Indicates unread changes.
         */
        "indicator"?: boolean;
        /**
          * Label of the action, exposed on hover. If no label is provided, the label inherits what's provided for the `text` prop.
         */
        "label"?: string;
        /**
          * When true, content is waiting to be loaded. This state shows a busy indicator.
         */
        "loading"?: boolean;
        /**
          * Specifies the size of the action.
         */
        "scale"?: CalciteScale;
        /**
          * Text that accompanies the action icon.
         */
        "text": string;
        /**
          * Indicates whether the text is displayed.
         */
        "textEnabled"?: boolean;
        /**
          * Used to set the component's color scheme.
         */
        "theme"?: CalciteTheme;
    }
    interface CalciteActionBar {
        /**
          * Indicates whether widget can be expanded.
         */
        "expand"?: boolean;
        /**
          * Indicates whether widget is expanded.
         */
        "expanded"?: boolean;
        /**
          * Updates the label of the collapse icon when the component is expanded.
         */
        "intlCollapse"?: string;
        /**
          * Updates the label of the expand icon when the component is not expanded.
         */
        "intlExpand"?: string;
        /**
          * Arrangement of the component. Leading and trailing are different depending on if the direction is LTR or RTL. For example, "leading" in a LTR app will appear on the left.
          * @deprecated use "position" instead.
         */
        "layout"?: CalciteLayout;
        /**
          * Emitted when expanded has been toggled.
         */
        "onCalciteActionBarToggle"?: (event: CustomEvent<any>) => void;
        /**
          * Arranges the component depending on the elements 'dir' property.
         */
        "position"?: CalcitePosition;
        /**
          * Updates the label of the collapse icon when the component is expanded.
          * @deprecated use "intlCollapse" instead.
         */
        "textCollapse"?: string;
        /**
          * Updates the label of the expand icon when the component is not expanded.
          * @deprecated use "intlExpand" instead.
         */
        "textExpand"?: string;
        /**
          * Used to set the component's color scheme.
         */
        "theme"?: CalciteTheme;
        /**
          * Used to set the tooltip for the expand toggle.
         */
        "tooltipExpand"?: HTMLCalciteTooltipElement;
    }
    interface CalciteActionGroup {
    }
    interface CalciteActionPad {
        /**
          * Indicates whether widget can be expanded.
         */
        "expand"?: boolean;
        /**
          * Indicates whether widget is expanded.
         */
        "expanded"?: boolean;
        /**
          * Updates the label of the collapse icon when the component is expanded.
         */
        "intlCollapse"?: string;
        /**
          * Updates the label of the expand icon when the component is not expanded.
         */
        "intlExpand"?: string;
        /**
          * Arrangement of the component.
          * @deprecated use "position" instead.
         */
        "layout"?: CalciteLayout;
        /**
          * Emitted when expanded has been toggled.
         */
        "onCalciteActionPadToggle"?: (event: CustomEvent<any>) => void;
        /**
          * Arranges the component depending on the elements 'dir' property.
         */
        "position"?: CalcitePosition;
        /**
          * Updates the label of the collapse icon when the component is expanded.
          * @deprecated use "intlCollapse" instead.
         */
        "textCollapse"?: string;
        /**
          * Updates the label of the expand icon when the component is not expanded.
          * @deprecated use "intlExpand" instead.
         */
        "textExpand"?: string;
        /**
          * Used to set the component's color scheme.
         */
        "theme"?: CalciteTheme;
        /**
          * Used to set the tooltip for the expand toggle.
         */
        "tooltipExpand"?: HTMLCalciteTooltipElement;
    }
    interface CalciteBlock {
        /**
          * When true, this block will be collapsible.
         */
        "collapsible"?: boolean;
        /**
          * When true, disabled prevents interaction. This state shows items with lower opacity/grayed.
         */
        "disabled"?: boolean;
        /**
          * When true, displays a drag handle in the header.
         */
        "dragHandle"?: boolean;
        /**
          * Block heading.
         */
        "heading"?: string;
        /**
          * Tooltip used for the toggle when expanded.
         */
        "intlCollapse"?: string;
        /**
          * Tooltip used for the toggle when collapsed.
         */
        "intlExpand"?: string;
        /**
          * When true, content is waiting to be loaded. This state shows a busy indicator.
         */
        "loading"?: boolean;
        /**
          * Emitted when the header has been clicked.
         */
        "onCalciteBlockToggle"?: (event: CustomEvent<any>) => void;
        /**
          * When true, the block's content will be displayed.
         */
        "open"?: boolean;
        /**
          * Block summary.
         */
        "summary"?: string;
        /**
          * Tooltip used for the toggle when expanded.
          * @deprecated use "intlCollapse" instead.
         */
        "textCollapse"?: string;
        /**
          * Tooltip used for the toggle when collapsed.
          * @deprecated use "intlExpand" instead.
         */
        "textExpand"?: string;
        /**
          * Used to set the component's color scheme.
         */
        "theme"?: CalciteTheme;
    }
    interface CalciteBlockSection {
        /**
          * Tooltip used for the toggle when expanded.
         */
        "intlCollapse"?: string;
        /**
          * Tooltip used for the toggle when collapsed.
         */
        "intlExpand"?: string;
        /**
          * Emitted when the header has been clicked.
         */
        "onCalciteBlockSectionToggle"?: (event: CustomEvent<any>) => void;
        /**
          * When true, the block's section content will be displayed.
         */
        "open"?: boolean;
        /**
          * Text displayed in the button.
         */
        "text"?: string;
        /**
          * Tooltip used for the toggle when expanded.
          * @deprecated use "intlCollapse" instead.
         */
        "textCollapse"?: string;
        /**
          * Tooltip used for the toggle when collapsed.
          * @deprecated use "intlExpand" instead.
         */
        "textExpand"?: string;
        /**
          * This property determines the look of the section toggle. If the value is "switch", a toggle-switch will be displayed. If the value is "button", a clickable header is displayed.
          * @todo revisit doc
         */
        "toggleDisplay"?: CalciteBlockSectionToggleDisplay;
    }
    interface CalciteFab {
        /**
          * Used to set the button's appearance. Default is outline.
         */
        "appearance"?: CalciteAppearance;
        /**
          * When true, disabled prevents interaction. This state shows items with lower opacity/grayed.
         */
        "disabled"?: boolean;
        /**
          * The name of the icon to display. The value of this property must match the icon name from https://esri.github.io/calcite-ui-icons/.
         */
        "icon"?: string;
        /**
          * Label of the FAB, exposed on hover. If no label is provided, the label inherits what's provided for the `text` prop.
         */
        "label"?: string;
        /**
          * When true, content is waiting to be loaded. This state shows a busy indicator.
         */
        "loading"?: boolean;
        /**
          * Specifies the size of the fab.
         */
        "scale"?: CalciteScale;
        /**
          * Text that accompanies the FAB icon.
         */
        "text"?: string;
        /**
          * Indicates whether the text is displayed.
         */
        "textEnabled"?: boolean;
        /**
          * Used to set the component's color scheme.
         */
        "theme"?: CalciteTheme;
    }
    interface CalciteFilter {
        /**
          * The input data. The filter uses this as the starting point, and returns items that contain the string entered in the input, using a partial match and recursive search.
         */
        "data"?: object[];
        /**
          * A text label that will appear on the clear button.
         */
        "intlClear"?: string;
        /**
          * A text label that will appear next to the input field.
         */
        "intlLabel"?: string;
        "onCalciteFilterChange"?: (event: CustomEvent<any>) => void;
        /**
          * Placeholder text for the input element's placeholder attribute
         */
        "placeholder"?: string;
        /**
          * A text label that will appear next to the input field.
          * @deprecated use "intlLabel" instead.
         */
        "textLabel"?: string;
        /**
          * Placeholder text for the input element's placeholder attribute
          * @deprecated use "placeholder" instead.
         */
        "textPlaceholder"?: string;
    }
    interface CalciteFlow {
        /**
          * Used to set the component's color scheme.
         */
        "theme"?: CalciteTheme;
    }
    interface CalciteFlowItem {
        /**
          * When provided, this method will be called before it is removed from the parent flow.
         */
        "beforeBack"?: () => Promise<void>;
        /**
          * When true, disabled prevents interaction. This state shows items with lower opacity/grayed.
         */
        "disabled"?: boolean;
        /**
          * Heading text.
         */
        "heading"?: string;
        /**
          * Specifies the maxiumum height of the panel that this wraps.
         */
        "heightScale"?: CalciteScale;
        /**
          * 'Back' text string.
         */
        "intlBack"?: string;
        /**
          * 'Close' text string for the close button. The close button will only be shown when 'dismissible' is true.
         */
        "intlClose"?: string;
        /**
          * 'Open' text string for the menu.
         */
        "intlOpen"?: string;
        /**
          * When true, content is waiting to be loaded. This state shows a busy indicator.
         */
        "loading"?: boolean;
        /**
          * Opens the action menu.
         */
        "menuOpen"?: boolean;
        /**
          * Emitted when the back button has been clicked.
         */
        "onCalciteFlowItemBackClick"?: (event: CustomEvent<any>) => void;
        /**
          * Emitted when the content has been scrolled.
         */
        "onCalciteFlowItemScroll"?: (event: CustomEvent<any>) => void;
        /**
          * Shows a back button in the header.
         */
        "showBackButton"?: boolean;
        /**
          * Summary text. A description displayed underneath the heading.
         */
        "summary"?: string;
        /**
          * 'Back' text string.
          * @deprecated use "intlBack" instead.
         */
        "textBack"?: string;
        /**
          * 'Close' text string for the menu.
          * @deprecated use "intlClose" instead.
         */
        "textClose"?: string;
        /**
          * 'Open' text string for the menu.
          * @deprecated use "intlOpen" instead.
         */
        "textOpen"?: string;
        /**
          * Used to set the component's color scheme.
         */
        "theme"?: CalciteTheme;
    }
    interface CalciteHandle {
        /**
          * Emmitted when the the handle is activated and the up or down arrow key is pressed.
          * @event calciteHandleNudge
         */
        "onCalciteHandleNudge"?: (event: CustomEvent<any>) => void;
        /**
          * Value for the button title attribute
         */
        "textTitle"?: string;
    }
    interface CalcitePanel {
        /**
          * When true, disabled prevents interaction. This state shows items with lower opacity/grayed.
         */
        "disabled"?: boolean;
        /**
          * Hides the panel.
         */
        "dismissed"?: boolean;
        /**
          * Displays a close button in the trailing side of the header.
         */
        "dismissible"?: boolean;
        /**
          * Specifies the maxiumum height of the panel.
         */
        "heightScale"?: CalciteScale;
        /**
          * 'Close' text string for the close button. The close button will only be shown when 'dismissible' is true.
         */
        "intlClose"?: string;
        /**
          * When true, content is waiting to be loaded. This state shows a busy indicator.
         */
        "loading"?: boolean;
        /**
          * Emitted when the close button has been clicked.
         */
        "onCalcitePanelDismissedChange"?: (event: CustomEvent<any>) => void;
        /**
          * Emitted when the content has been scrolled.
         */
        "onCalcitePanelScroll"?: (event: CustomEvent<any>) => void;
        /**
          * 'Close' text string for the close button. The close button will only be shown when 'dismissible' is true.
          * @deprecated use "intlClose" instead.
         */
        "textClose"?: string;
        /**
          * Used to set the component's color scheme.
         */
        "theme"?: CalciteTheme;
    }
    interface CalcitePickList {
        /**
          * Compact removes the selection icon (radio or checkbox) and adds a compact attribute. This allows for a more compact version of the `calcite-pick-list-item`.
          * @deprecated This property will be removed in a future release.
         */
        "compact"?: boolean;
        /**
          * When true, disabled prevents interaction. This state shows items with lower opacity/grayed.
         */
        "disabled"?: boolean;
        /**
          * When true, an input appears at the top of the list that can be used by end users to filter items in the list.
         */
        "filterEnabled"?: boolean;
        /**
          * When true, content is waiting to be loaded. This state shows a busy indicator.
         */
        "loading"?: boolean;
        /**
          * Multiple works similar to standard radio buttons and checkboxes. When true, a user can select multiple items at a time. When false, only a single item can be selected at a time and selecting a new item will deselect any other selected items.
         */
        "multiple"?: boolean;
        /**
          * Emitted when any of the item selections have changed.
          * @event calciteListChange
         */
        "onCalciteListChange"?: (event: CustomEvent<any>) => void;
        /**
          * Placeholder text for the filter input field.
         */
        "textFilterPlaceholder"?: string;
    }
    interface CalcitePickListGroup {
        /**
          * The title used for all nested `calcite-pick-list` rows
         */
        "textGroupTitle"?: string;
    }
    interface CalcitePickListItem {
        /**
          * Compact removes the selection icon (radio or checkbox) and adds a compact attribute. This allows for a more compact version of the `calcite-pick-list-item`.
          * @deprecated This property will be removed in a future release.
         */
        "compact"?: boolean;
        /**
          * When false, the item cannot be deselected by user interaction.
         */
        "disableDeselect"?: boolean;
        /**
          * When true, the item cannot be clicked and is visually muted.
         */
        "disabled"?: boolean;
        /**
          * Determines the icon SVG symbol that will be shown. Options are circle, square, grid or null.
         */
        "icon"?: ICON_TYPES | null;
        /**
          * Used to provide additional metadata to an item, primarily used when the parent list has a filter.
         */
        "metadata"?: object;
        /**
          * Emitted whenever the item is selected or unselected.
          * @event calciteListItemChange
         */
        "onCalciteListItemChange"?: (event: CustomEvent<{
            item: HTMLCalcitePickListItemElement;
            value: string;
            selected: boolean;
            shiftPressed: boolean;
        }>) => void;
        /**
          * Emitted whenever the remove button is pressed.
          * @event calciteListItemRemove
         */
        "onCalciteListItemRemove"?: (event: CustomEvent<void>) => void;
        /**
          * Set this to true to display a remove action that removes the item from the list.
         */
        "removable"?: boolean;
        /**
          * Set this to true to pre-select an item. Toggles when an item is checked/unchecked.
         */
        "selected"?: boolean;
        /**
          * An optional description for this item.  This will appear below the label text.
         */
        "textDescription"?: string;
        /**
          * The main label for this item. This will appear next to the icon.
         */
        "textLabel"?: string;
        /**
          * The text for the remove item buttons. Only applicable if removable is true.
         */
        "textRemove"?: string;
        /**
          * A unique value used to identify this item - similar to the value attribute on an <input>.
         */
        "value": string;
    }
    interface CalciteShell {
        /**
          * Used to set the component's color scheme.
         */
        "theme"?: CalciteTheme;
    }
    interface CalciteShellPanel {
        /**
          * Hide the content panel.
         */
        "collapsed"?: boolean;
        /**
          * This property makes the content area appear like a "floating" panel.
         */
        "detached"?: boolean;
        /**
          * This sets limits the height of the content area. It only applies when detached is true.
         */
        "detachedScale"?: CalciteScale;
        /**
          * Arrangement of the component.
          * @deprecated use "position" instead.
         */
        "layout"?: CalciteLayout;
        /**
          * Emitted when collapse has been toggled.
         */
        "onCalciteShellPanelToggle"?: (event: CustomEvent<any>) => void;
        /**
          * Arranges the component depending on the elements 'dir' property.
         */
        "position"?: CalcitePosition;
    }
    interface CalciteSortableList {
        /**
          * When true, disabled prevents interaction. This state shows items with lower opacity/grayed.
         */
        "disabled"?: boolean;
        /**
          * The class on the handle elements.
         */
        "handleSelector"?: string;
        /**
          * When true, content is waiting to be loaded. This state shows a busy indicator.
         */
        "loading"?: boolean;
        /**
          * Emmitted when the order of the list has changed.
          * @event calciteListOrderChange
         */
        "onCalciteListOrderChange"?: (event: CustomEvent<any>) => void;
    }
    interface CalciteTip {
        /**
          * No longer displays the tip.
         */
        "dismissed"?: boolean;
        /**
          * The heading of the tip.
         */
        "heading"?: string;
        /**
          * Alternate text for closing the tip.
         */
        "intlClose"?: string;
        /**
          * Indicates whether the tip can be dismissed.
         */
        "nonDismissible"?: boolean;
        /**
          * Emitted when the component has been dismissed.
         */
        "onCalciteTipDismiss"?: (event: CustomEvent<any>) => void;
        /**
          * The selected state of the tip if it is being used inside a `calcite-tip-manager`.
         */
        "selected"?: boolean;
        /**
          * Alternate text for closing the tip.
          * @deprecated use "intlClose" instead.
         */
        "textClose"?: string;
        /**
          * Used to set the component's color scheme.
         */
        "theme"?: CalciteTheme;
    }
    interface CalciteTipGroup {
        /**
          * The title used for all nested tips.
         */
        "textGroupTitle"?: string;
    }
    interface CalciteTipManager {
        /**
          * Alternate text for closing the `calcite-tip-manager`.
         */
        "closed"?: boolean;
        /**
          * Alternate text for closing the tip.
         */
        "intlClose"?: string;
        /**
          * The default group title for the `calcite-tip-manager`.
         */
        "intlDefaultTitle"?: string;
        /**
          * Alternate text for navigating to the next tip.
         */
        "intlNext"?: string;
        /**
          * Label that appears on hover of pagination icon.
         */
        "intlPaginationLabel"?: string;
        /**
          * Alternate text for navigating to the previous tip.
         */
        "intlPrevious"?: string;
        /**
          * Emitted when the `calcite-tip-manager` has been toggled open or closed.
         */
        "onCalciteTipManagerToggle"?: (event: CustomEvent<any>) => void;
        /**
          * Alternate text for closing the tip.
          * @deprecated use "intlClose" instead.
         */
        "textClose"?: string;
        /**
          * The default group title for the `calcite-tip-manager`.
          * @deprecated use "intlDefaultTitle" instead.
         */
        "textDefaultTitle"?: string;
        /**
          * Alternate text for navigating to the next tip.
          * @deprecated use "intlNext" instead.
         */
        "textNext"?: string;
        /**
          * Label that appears on hover of pagination icon.
          * @deprecated use "intlPaginationLabel" instead.
         */
        "textPaginationLabel"?: string;
        /**
          * Alternate text for navigating to the previous tip.
          * @deprecated use "intlPrevious" instead.
         */
        "textPrevious"?: string;
        /**
          * Used to set the component's color scheme.
         */
        "theme"?: CalciteTheme;
    }
    interface CalciteValueList {
        /**
          * Compact reduces the size of all items in the list.
          * @deprecated This property will be removed in a future release.
         */
        "compact"?: boolean;
        /**
          * When true, disabled prevents interaction. This state shows items with lower opacity/grayed.
         */
        "disabled"?: boolean;
        /**
          * When true, the items will be sortable via drag and drop.
         */
        "dragEnabled"?: boolean;
        /**
          * When true, an input appears at the top of the list that can be used by end users to filter items in the list.
         */
        "filterEnabled"?: boolean;
        /**
          * When true, content is waiting to be loaded. This state shows a busy indicator.
         */
        "loading"?: boolean;
        /**
          * Multiple Works similar to standard radio buttons and checkboxes. When true, a user can select multiple items at a time. When false, only a single item can be selected at a time and selecting a new item will deselect any other selected items.
         */
        "multiple"?: boolean;
        /**
          * Emitted when any of the item selections have changed.
          * @event calciteListChange
         */
        "onCalciteListChange"?: (event: CustomEvent<any>) => void;
        /**
          * Emmitted when the order of the list has changed.
          * @event calciteListOrderChange
         */
        "onCalciteListOrderChange"?: (event: CustomEvent<any>) => void;
        /**
          * Placeholder text for the filter input field.
         */
        "textFilterPlaceholder"?: string;
    }
    interface CalciteValueListItem {
        /**
          * Compact reduces the size of the item.
          * @deprecated This property will be removed in a future release.
         */
        "compact"?: boolean;
        /**
          * When true, the item cannot be clicked and is visually muted
         */
        "disabled"?: boolean;
        /**
          * Determines the icon SVG symbol that will be shown. Options are circle, square, grid or null.
         */
        "icon"?: ICON_TYPES | null;
        /**
          * Used to provide additional metadata to an item, primarily used when the parent list has a filter.
         */
        "metadata"?: object;
        /**
          * Set this to true to display a remove action that removes the item from the list.
         */
        "removable"?: boolean;
        /**
          * Set this to true to pre-select an item. Toggles when an item is checked/unchecked.
         */
        "selected"?: boolean;
        /**
          * An optional description for this item. Will appear below the label text.
         */
        "textDescription"?: string;
        /**
          * The main label for this item. Appears next to the icon.
         */
        "textLabel": string;
        /**
          * A unique value used to identify this item - similar to the value attribute on an <input>.
         */
        "value": string;
    }
    interface IntrinsicElements {
        "calcite-action": CalciteAction;
        "calcite-action-bar": CalciteActionBar;
        "calcite-action-group": CalciteActionGroup;
        "calcite-action-pad": CalciteActionPad;
        "calcite-block": CalciteBlock;
        "calcite-block-section": CalciteBlockSection;
        "calcite-fab": CalciteFab;
        "calcite-filter": CalciteFilter;
        "calcite-flow": CalciteFlow;
        "calcite-flow-item": CalciteFlowItem;
        "calcite-handle": CalciteHandle;
        "calcite-panel": CalcitePanel;
        "calcite-pick-list": CalcitePickList;
        "calcite-pick-list-group": CalcitePickListGroup;
        "calcite-pick-list-item": CalcitePickListItem;
        "calcite-shell": CalciteShell;
        "calcite-shell-panel": CalciteShellPanel;
        "calcite-sortable-list": CalciteSortableList;
        "calcite-tip": CalciteTip;
        "calcite-tip-group": CalciteTipGroup;
        "calcite-tip-manager": CalciteTipManager;
        "calcite-value-list": CalciteValueList;
        "calcite-value-list-item": CalciteValueListItem;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "calcite-action": LocalJSX.CalciteAction & JSXBase.HTMLAttributes<HTMLCalciteActionElement>;
            "calcite-action-bar": LocalJSX.CalciteActionBar & JSXBase.HTMLAttributes<HTMLCalciteActionBarElement>;
            "calcite-action-group": LocalJSX.CalciteActionGroup & JSXBase.HTMLAttributes<HTMLCalciteActionGroupElement>;
            "calcite-action-pad": LocalJSX.CalciteActionPad & JSXBase.HTMLAttributes<HTMLCalciteActionPadElement>;
            "calcite-block": LocalJSX.CalciteBlock & JSXBase.HTMLAttributes<HTMLCalciteBlockElement>;
            "calcite-block-section": LocalJSX.CalciteBlockSection & JSXBase.HTMLAttributes<HTMLCalciteBlockSectionElement>;
            "calcite-fab": LocalJSX.CalciteFab & JSXBase.HTMLAttributes<HTMLCalciteFabElement>;
            "calcite-filter": LocalJSX.CalciteFilter & JSXBase.HTMLAttributes<HTMLCalciteFilterElement>;
            "calcite-flow": LocalJSX.CalciteFlow & JSXBase.HTMLAttributes<HTMLCalciteFlowElement>;
            "calcite-flow-item": LocalJSX.CalciteFlowItem & JSXBase.HTMLAttributes<HTMLCalciteFlowItemElement>;
            "calcite-handle": LocalJSX.CalciteHandle & JSXBase.HTMLAttributes<HTMLCalciteHandleElement>;
            "calcite-panel": LocalJSX.CalcitePanel & JSXBase.HTMLAttributes<HTMLCalcitePanelElement>;
            "calcite-pick-list": LocalJSX.CalcitePickList & JSXBase.HTMLAttributes<HTMLCalcitePickListElement>;
            "calcite-pick-list-group": LocalJSX.CalcitePickListGroup & JSXBase.HTMLAttributes<HTMLCalcitePickListGroupElement>;
            "calcite-pick-list-item": LocalJSX.CalcitePickListItem & JSXBase.HTMLAttributes<HTMLCalcitePickListItemElement>;
            "calcite-shell": LocalJSX.CalciteShell & JSXBase.HTMLAttributes<HTMLCalciteShellElement>;
            "calcite-shell-panel": LocalJSX.CalciteShellPanel & JSXBase.HTMLAttributes<HTMLCalciteShellPanelElement>;
            "calcite-sortable-list": LocalJSX.CalciteSortableList & JSXBase.HTMLAttributes<HTMLCalciteSortableListElement>;
            "calcite-tip": LocalJSX.CalciteTip & JSXBase.HTMLAttributes<HTMLCalciteTipElement>;
            "calcite-tip-group": LocalJSX.CalciteTipGroup & JSXBase.HTMLAttributes<HTMLCalciteTipGroupElement>;
            "calcite-tip-manager": LocalJSX.CalciteTipManager & JSXBase.HTMLAttributes<HTMLCalciteTipManagerElement>;
            "calcite-value-list": LocalJSX.CalciteValueList & JSXBase.HTMLAttributes<HTMLCalciteValueListElement>;
            "calcite-value-list-item": LocalJSX.CalciteValueListItem & JSXBase.HTMLAttributes<HTMLCalciteValueListItemElement>;
        }
    }
}
